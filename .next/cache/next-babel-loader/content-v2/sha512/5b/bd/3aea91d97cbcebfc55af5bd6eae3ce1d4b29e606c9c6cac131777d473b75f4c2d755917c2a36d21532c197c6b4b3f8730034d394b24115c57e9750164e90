{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\jheinrich\\\\Desktop\\\\learningReact\\\\pages\\\\star-match.js\";\nimport NavBar from '../src/components/Navbar/Navbar';\nimport React, { useState, useEffect } from 'react';\n\nconst StarsDisplay = props => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: createRange(1, props.stars).map(starId => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"star\"\n    }, starId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 17\n    }, this))\n  }, void 0, false);\n};\n\nconst ButtonDisplay = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: createRange(1, 9).map(number => /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"number\",\n      onClick: () => console.log(\"Num \", number),\n      children: number\n    }, number, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 17\n    }, this))\n  }, void 0, false);\n};\n\nfunction getRandomIntInclusive(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive\n}\n\nfunction createRange(min, max) {\n  return Array.from({\n    length: max - min + 1\n  }, (_, i) => min + i);\n}\n\nconst StarMatch = () => {\n  const {\n    0: stars,\n    1: setStars\n  } = useState(getRandomIntInclusive(1, 9));\n  const {\n    0: availableNums,\n    1: setAvailableNums\n  } = useState([1, 2, 3, 4, 5]);\n  const {\n    0: candiateNums,\n    1: setCandidateNums\n  } = useState([2, 3]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col min-h-screen\",\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"help\",\n        children: \"Pick 1 or more numbers that sum to the number of stars\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"body\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left\",\n          children: /*#__PURE__*/_jsxDEV(StarsDisplay, {\n            count: stars\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"right\",\n          children: /*#__PURE__*/_jsxDEV(ButtonDisplay, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer\",\n        children: \"Time Remaining: 10\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}; // Color Theme\n\n\nconst colors = {\n  available: 'lightgray',\n  used: 'lightgreen',\n  wrong: 'lightcoral',\n  candidate: 'deepskyblue'\n}; // Math science\n\nconst utils = {\n  // Sum an array\n  sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\n  // create an array of numbers between min and max (edges included)\n  range: (min, max) => Array.from({\n    length: max - min + 1\n  }, (_, i) => min + i),\n  // pick a random number between min and max (edges included)\n  random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\n  // Given an array of numbers and a max...\n  // Pick a random sum (< max) from the set of all available sums in arr\n  randomSumIn: (arr, max) => {\n    const sets = [[]];\n    const sums = [];\n\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0, len = sets.length; j < len; j++) {\n        const candidateSet = sets[j].concat(arr[i]);\n        const candidateSum = utils.sum(candidateSet);\n\n        if (candidateSum <= max) {\n          sets.push(candidateSet);\n          sums.push(candidateSum);\n        }\n      }\n    }\n\n    return sums[utils.random(0, sums.length - 1)];\n  }\n};\nexport default StarMatch;","map":{"version":3,"sources":["C:/Users/jheinrich/Desktop/learningReact/pages/star-match.js"],"names":["NavBar","React","useState","useEffect","StarsDisplay","props","createRange","stars","map","starId","ButtonDisplay","number","console","log","getRandomIntInclusive","min","max","Math","ceil","floor","random","Array","from","length","_","i","StarMatch","setStars","availableNums","setAvailableNums","candiateNums","setCandidateNums","colors","available","used","wrong","candidate","utils","sum","arr","reduce","acc","curr","range","randomSumIn","sets","sums","j","len","candidateSet","concat","candidateSum","push"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,iCAAnB;AACA,OAAOC,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;;AAEA,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAC1B,sBACI;AAAA,cACKC,WAAW,CAAC,CAAD,EAAID,KAAK,CAACE,KAAV,CAAX,CAA4BC,GAA5B,CAAgCC,MAAM,iBACnC;AAAkB,MAAA,SAAS,EAAC;AAA5B,OAAUA,MAAV;AAAA;AAAA;AAAA;AAAA,YADH;AADL,mBADJ;AAOH,CARD;;AAUA,MAAMC,aAAa,GAAG,MAAM;AACxB,sBACI;AAAA,cACKJ,WAAW,CAAC,CAAD,EAAI,CAAJ,CAAX,CAAkBE,GAAlB,CAAsBG,MAAM,iBACzB;AAAqB,MAAA,SAAS,EAAC,QAA/B;AAAwC,MAAA,OAAO,EAAE,MAAMC,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,MAApB,CAAvD;AAAA,gBAAqFA;AAArF,OAAaA,MAAb;AAAA;AAAA;AAAA;AAAA,YADH;AADL,mBADJ;AAOH,CARD;;AAUA,SAASG,qBAAT,CAA+BC,GAA/B,EAAoCC,GAApC,EAAyC;AACrCD,EAAAA,GAAG,GAAGE,IAAI,CAACC,IAAL,CAAUH,GAAV,CAAN;AACAC,EAAAA,GAAG,GAAGC,IAAI,CAACE,KAAL,CAAWH,GAAX,CAAN;AACA,SAAOC,IAAI,CAACE,KAAL,CAAWF,IAAI,CAACG,MAAL,MAAiBJ,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP,CAHqC,CAGqB;AAC3D;;AAEH,SAAST,WAAT,CAAqBS,GAArB,EAA0BC,GAA1B,EAA+B;AAC3B,SAAOK,KAAK,CAACC,IAAN,CAAW;AAAEC,IAAAA,MAAM,EAAEP,GAAG,GAAGD,GAAN,GAAY;AAAtB,GAAX,EAAsC,CAACS,CAAD,EAAIC,CAAJ,KAAUV,GAAG,GAAGU,CAAtD,CAAP;AACH;;AAED,MAAMC,SAAS,GAAG,MAAM;AACpB,QAAM;AAAA,OAACnB,KAAD;AAAA,OAAQoB;AAAR,MAAoBzB,QAAQ,CAACY,qBAAqB,CAAC,CAAD,EAAG,CAAH,CAAtB,CAAlC;AACA,QAAM;AAAA,OAACc,aAAD;AAAA,OAAgBC;AAAhB,MAAoC3B,QAAQ,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAD,CAAlD;AACA,QAAM;AAAA,OAAC4B,YAAD;AAAA,OAAeC;AAAf,MAAmC7B,QAAQ,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,CAAjD;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,4BAAf;AAAA,4BACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAII;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC,MAAf;AAAA,iCACI,QAAC,YAAD;AAAc,YAAA,KAAK,EAAEK;AAArB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII;AAAK,UAAA,SAAS,EAAC,OAAf;AAAA,iCACI,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,eAYI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAmBH,CAxBD,C,CA2BA;;;AACA,MAAMyB,MAAM,GAAG;AACXC,EAAAA,SAAS,EAAE,WADA;AAEXC,EAAAA,IAAI,EAAE,YAFK;AAGXC,EAAAA,KAAK,EAAE,YAHI;AAIXC,EAAAA,SAAS,EAAE;AAJA,CAAf,C,CAOE;;AACA,MAAMC,KAAK,GAAG;AACZ;AACAC,EAAAA,GAAG,EAAEC,GAAG,IAAIA,GAAG,CAACC,MAAJ,CAAW,CAACC,GAAD,EAAMC,IAAN,KAAeD,GAAG,GAAGC,IAAhC,EAAsC,CAAtC,CAFA;AAIZ;AACAC,EAAAA,KAAK,EAAE,CAAC5B,GAAD,EAAMC,GAAN,KAAcK,KAAK,CAACC,IAAN,CAAW;AAAEC,IAAAA,MAAM,EAAEP,GAAG,GAAGD,GAAN,GAAY;AAAtB,GAAX,EAAsC,CAACS,CAAD,EAAIC,CAAJ,KAAUV,GAAG,GAAGU,CAAtD,CALT;AAOZ;AACAL,EAAAA,MAAM,EAAE,CAACL,GAAD,EAAMC,GAAN,KAAcD,GAAG,GAAGE,IAAI,CAACE,KAAL,CAAWF,IAAI,CAACG,MAAL,MAAiBJ,GAAG,GAAGD,GAAN,GAAY,CAA7B,CAAX,CARhB;AAUZ;AACA;AACA6B,EAAAA,WAAW,EAAE,CAACL,GAAD,EAAMvB,GAAN,KAAc;AACzB,UAAM6B,IAAI,GAAG,CAAC,EAAD,CAAb;AACA,UAAMC,IAAI,GAAG,EAAb;;AACA,SAAK,IAAIrB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGc,GAAG,CAAChB,MAAxB,EAAgCE,CAAC,EAAjC,EAAqC;AACnC,WAAK,IAAIsB,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGH,IAAI,CAACtB,MAA3B,EAAmCwB,CAAC,GAAGC,GAAvC,EAA4CD,CAAC,EAA7C,EAAiD;AAC/C,cAAME,YAAY,GAAGJ,IAAI,CAACE,CAAD,CAAJ,CAAQG,MAAR,CAAeX,GAAG,CAACd,CAAD,CAAlB,CAArB;AACA,cAAM0B,YAAY,GAAGd,KAAK,CAACC,GAAN,CAAUW,YAAV,CAArB;;AACA,YAAIE,YAAY,IAAInC,GAApB,EAAyB;AACvB6B,UAAAA,IAAI,CAACO,IAAL,CAAUH,YAAV;AACAH,UAAAA,IAAI,CAACM,IAAL,CAAUD,YAAV;AACD;AACF;AACF;;AACD,WAAOL,IAAI,CAACT,KAAK,CAACjB,MAAN,CAAa,CAAb,EAAgB0B,IAAI,CAACvB,MAAL,GAAc,CAA9B,CAAD,CAAX;AACD;AA1BW,CAAd;AA6BF,eAAeG,SAAf","sourcesContent":["import NavBar from '../src/components/Navbar/Navbar';\r\nimport React, {useState, useEffect} from 'react';\r\n\r\nconst StarsDisplay = props => {\r\n    return (\r\n        <>\r\n            {createRange(1, props.stars).map(starId => \r\n                <div key={starId} className=\"star\"></div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nconst ButtonDisplay = () => {\r\n    return (\r\n        <>\r\n            {createRange(1, 9).map(number => \r\n                <button key={number} className=\"number\" onClick={() => console.log(\"Num \", number)}>{number}</button>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nfunction getRandomIntInclusive(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive\r\n  }\r\n\r\nfunction createRange(min, max) {\r\n    return Array.from({ length: max - min + 1 }, (_, i) => min + i);\r\n}\r\n\r\nconst StarMatch = () => {\r\n    const [stars, setStars] = useState(getRandomIntInclusive(1,9));\r\n    const [availableNums, setAvailableNums] = useState([1, 2, 3, 4, 5]);\r\n    const [candiateNums, setCandidateNums] = useState([2, 3]);\r\n\r\n    return (\r\n        <div className=\"flex flex-col min-h-screen\">\r\n            <NavBar></NavBar>\r\n            <div className=\"game\">\r\n                <div className=\"help\">\r\n                Pick 1 or more numbers that sum to the number of stars\r\n                </div>\r\n                <div className=\"body\">\r\n                    <div className=\"left\">\r\n                        <StarsDisplay count={stars}/>\r\n                    </div>\r\n                    <div className=\"right\">\r\n                        <ButtonDisplay/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"timer\">Time Remaining: 10</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n// Color Theme\r\nconst colors = {\r\n    available: 'lightgray',\r\n    used: 'lightgreen',\r\n    wrong: 'lightcoral',\r\n    candidate: 'deepskyblue',\r\n  };\r\n  \r\n  // Math science\r\n  const utils = {\r\n    // Sum an array\r\n    sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\r\n  \r\n    // create an array of numbers between min and max (edges included)\r\n    range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\r\n  \r\n    // pick a random number between min and max (edges included)\r\n    random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\r\n  \r\n    // Given an array of numbers and a max...\r\n    // Pick a random sum (< max) from the set of all available sums in arr\r\n    randomSumIn: (arr, max) => {\r\n      const sets = [[]];\r\n      const sums = [];\r\n      for (let i = 0; i < arr.length; i++) {\r\n        for (let j = 0, len = sets.length; j < len; j++) {\r\n          const candidateSet = sets[j].concat(arr[i]);\r\n          const candidateSum = utils.sum(candidateSet);\r\n          if (candidateSum <= max) {\r\n            sets.push(candidateSet);\r\n            sums.push(candidateSum);\r\n          }\r\n        }\r\n      }\r\n      return sums[utils.random(0, sums.length - 1)];\r\n    },\r\n  };\r\n\r\nexport default StarMatch;"]},"metadata":{},"sourceType":"module"}