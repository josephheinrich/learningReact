{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction CryptoRenderProps(props) {\n  _s();\n\n  var _useState = useState({\n    btcData: [],\n    ethData: [],\n    bchData: []\n  }),\n      cryptoData = _useState[0],\n      setCryptoData = _useState[1];\n\n  var _useState2 = useState([]),\n      cryptoInfo = _useState2[0],\n      setCryptoInfo = _useState2[1];\n\n  var _useState3 = useState(true),\n      isLoading = _useState3[0],\n      setIsLoading = _useState3[1];\n\n  var fetchData = function fetchData() {\n    setIsLoading(true);\n    var btcURL = \"https://api.coinbase.com/v2/prices/BTC-USD/buy\";\n    var ethURL = \"https://api.coinbase.com/v2/prices/ETH-USD/buy\";\n    var bchURL = \"https://api.coinbase.com/v2/prices/BCH-USD/buy\";\n    Promise.all([axios.get(btcURL), axios.get(ethURL), axios.get(bchURL)]).then(function (results) {\n      setCryptoData({\n        btcData: results[0].data.data,\n        ethData: results[1].data.data,\n        bchData: results[2].data.data\n      });\n      setCryptoInfo([results[0].data.data, results[1].data.data, results[2].data.data]);\n    })[\"catch\"](function (err) {\n      console.log(err);\n      setIsLoading(false);\n    });\n  };\n\n  useEffect(function () {\n    setCryptoData({\n      isLoading: true\n    });\n    fetchData();\n  }, []);\n  var keys = Object.keys(cryptoData);\n  var rows = [];\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    rows.push(cryptoData[key]);\n  }\n\n  return props.children({\n    rows: rows\n  });\n}\n\n_s(CryptoRenderProps, \"piW++HsJm8zvQW1a0pUHt46UgYE=\");\n\n_c = CryptoRenderProps;\nexport default CryptoRenderProps;\n\nvar _c;\n\n$RefreshReg$(_c, \"CryptoRenderProps\");","map":{"version":3,"sources":["C:/Users/jheinrich/Desktop/learningReact/src/components/CryptoCard/CryptoRenderProps.js"],"names":["useState","useEffect","axios","CryptoRenderProps","props","btcData","ethData","bchData","cryptoData","setCryptoData","cryptoInfo","setCryptoInfo","isLoading","setIsLoading","fetchData","btcURL","ethURL","bchURL","Promise","all","get","then","results","data","err","console","log","keys","Object","rows","i","length","key","push","children"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAAA;;AAAA,kBACMJ,QAAQ,CAAC;AACzCK,IAAAA,OAAO,EAAE,EADgC;AAEzCC,IAAAA,OAAO,EAAE,EAFgC;AAGzCC,IAAAA,OAAO,EAAE;AAHgC,GAAD,CADd;AAAA,MACvBC,UADuB;AAAA,MACXC,aADW;;AAAA,mBAMMT,QAAQ,CAAC,EAAD,CANd;AAAA,MAMvBU,UANuB;AAAA,MAMXC,aANW;;AAAA,mBAOIX,QAAQ,CAAC,IAAD,CAPZ;AAAA,MAOvBY,SAPuB;AAAA,MAOZC,YAPY;;AAS9B,MAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AACpBD,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,QAAME,MAAM,GAAG,gDAAf;AACA,QAAMC,MAAM,GAAG,gDAAf;AACA,QAAMC,MAAM,GAAG,gDAAf;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY,CACRjB,KAAK,CAACkB,GAAN,CAAUL,MAAV,CADQ,EAERb,KAAK,CAACkB,GAAN,CAAUJ,MAAV,CAFQ,EAGRd,KAAK,CAACkB,GAAN,CAAUH,MAAV,CAHQ,CAAZ,EAIGI,IAJH,CAIQ,UAACC,OAAD,EAAa;AACjBb,MAAAA,aAAa,CAAC;AACVJ,QAAAA,OAAO,EAAEiB,OAAO,CAAC,CAAD,CAAP,CAAWC,IAAX,CAAgBA,IADf;AAEVjB,QAAAA,OAAO,EAAEgB,OAAO,CAAC,CAAD,CAAP,CAAWC,IAAX,CAAgBA,IAFf;AAGVhB,QAAAA,OAAO,EAAEe,OAAO,CAAC,CAAD,CAAP,CAAWC,IAAX,CAAgBA;AAHf,OAAD,CAAb;AAKAZ,MAAAA,aAAa,CAAC,CAACW,OAAO,CAAC,CAAD,CAAP,CAAWC,IAAX,CAAgBA,IAAjB,EAAuBD,OAAO,CAAC,CAAD,CAAP,CAAWC,IAAX,CAAgBA,IAAvC,EAA6CD,OAAO,CAAC,CAAD,CAAP,CAAWC,IAAX,CAAgBA,IAA7D,CAAD,CAAb;AACH,KAXD,WAYO,UAACC,GAAD,EAAS;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAX,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KAfD;AAgBH,GAtBD;;AAwBAZ,EAAAA,SAAS,CAAC,YAAM;AACZQ,IAAAA,aAAa,CAAC;AACVG,MAAAA,SAAS,EAAE;AADD,KAAD,CAAb;AAGAE,IAAAA,SAAS;AACZ,GALQ,EAKN,EALM,CAAT;AAOA,MAAIa,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYnB,UAAZ,CAAX;AACA,MAAIqB,IAAI,GAAG,EAAX;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACI,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,QAAIE,GAAG,GAAIL,IAAI,CAACG,CAAD,CAAf;AACAD,IAAAA,IAAI,CAACI,IAAL,CAAUzB,UAAU,CAACwB,GAAD,CAApB;AACH;;AAED,SAAO5B,KAAK,CAAC8B,QAAN,CAAe;AAClBL,IAAAA,IAAI,EAAEA;AADY,GAAf,CAAP;AAGH;;GAnDQ1B,iB;;KAAAA,iB;AAqDT,eAAeA,iBAAf","sourcesContent":["import {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction CryptoRenderProps(props) {\r\n    const [cryptoData, setCryptoData] = useState({\r\n        btcData: [],\r\n        ethData: [],\r\n        bchData: [],\r\n    });\r\n    const [cryptoInfo, setCryptoInfo] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    const fetchData = () => {\r\n        setIsLoading(true);\r\n        const btcURL = \"https://api.coinbase.com/v2/prices/BTC-USD/buy\";\r\n        const ethURL = \"https://api.coinbase.com/v2/prices/ETH-USD/buy\";\r\n        const bchURL = \"https://api.coinbase.com/v2/prices/BCH-USD/buy\";\r\n\r\n        Promise.all([\r\n            axios.get(btcURL),\r\n            axios.get(ethURL),\r\n            axios.get(bchURL)\r\n        ]).then((results) => {\r\n            setCryptoData({\r\n                btcData: results[0].data.data,\r\n                ethData: results[1].data.data,\r\n                bchData: results[2].data.data,\r\n            });\r\n            setCryptoInfo([results[0].data.data, results[1].data.data, results[2].data.data]);\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n            setIsLoading(false);\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        setCryptoData({\r\n            isLoading: true\r\n        })\r\n        fetchData();\r\n    }, [])\r\n\r\n    var keys = Object.keys(cryptoData);\r\n    var rows = [];\r\n\r\n    for (var i = 0; i < keys.length; i++) { \r\n        var key = (keys[i]);\r\n        rows.push(cryptoData[key]);\r\n    }\r\n\r\n    return props.children({\r\n        rows: rows,\r\n    });\r\n}\r\n\r\nexport default CryptoRenderProps;"]},"metadata":{},"sourceType":"module"}