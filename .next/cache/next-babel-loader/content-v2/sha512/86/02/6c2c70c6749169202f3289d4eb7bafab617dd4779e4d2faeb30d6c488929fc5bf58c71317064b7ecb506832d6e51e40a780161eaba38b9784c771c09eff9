{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\jheinrich\\\\Desktop\\\\learningReact\\\\pages\\\\star-match.js\";\nimport NavBar from '../src/components/Navbar/Navbar';\nimport React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst StarsDisplay = props => /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: utils.range(1, props.count).map(starId => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"star\"\n  }, starId, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 13\n  }, this))\n}, void 0, false);\n\nconst ButtonDisplay = props => {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    style: {\n      backgroundColor: colors[props.status]\n    },\n    className: \"number\",\n    onClick: () => props.onClick(props.number, props.status),\n    children: props.number\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this);\n};\n\nconst PlayAgain = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-done\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message\",\n      style: {\n        color: props.gameStatus === 'lost' ? 'red' : 'green'\n      },\n      children: props.gameStatus === 'lost' ? 'Game Over' : 'Nice'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: props.onClick,\n      children: \"Play Again\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n}; //Custom Hook\n\n\nconst useGameState = () => {\n  const {\n    0: stars,\n    1: setStars\n  } = useState(utils.random(1, 9));\n  const {\n    0: availableNums,\n    1: setAvailableNums\n  } = useState(utils.range(1, 9));\n  const {\n    0: candidateNums,\n    1: setCandidateNums\n  } = useState([]);\n  const {\n    0: secondsLeft,\n    1: setSecondsLeft\n  } = useState(10);\n  useEffect(() => {\n    if (secondsLeft > 0 && availableNums.length > 0) {\n      const timerID = setTimeout(() => {\n        setSecondsLeft(secondsLeft - 1);\n      }, 1000);\n      return () => clearTimeout(timerID);\n    }\n  });\n\n  const setGameState = newCandidateNums => {\n    if (utils.sum(newCandidateNums) !== stars) {\n      setCandidateNums(newCandidateNums);\n    } else {\n      const newAvailableNums = availableNums.filter(n => !newCandidateNums.includes(n));\n      setStars(utils.randomSumIn(newAvailableNums, 9));\n      setAvailableNums(newAvailableNums);\n      setCandidateNums([]);\n    }\n  };\n\n  return {\n    stars,\n    availableNums,\n    candidateNums,\n    secondsLeft,\n    setGameState\n  };\n};\n\nconst Game = props => {\n  const {\n    stars,\n    availableNums,\n    candidateNums,\n    secondsLeft,\n    setGameState\n  } = useGameState();\n  const candidatesAreWrong = utils.sum(candidateNums) > stars;\n  const gameStatus = availableNums.length === 0 ? 'won' : secondsLeft === 0 ? 'lost' : 'active';\n\n  const numberStatus = number => {\n    if (!availableNums.includes(number)) {\n      return 'used';\n    }\n\n    if (candidateNums.includes(number)) {\n      return candidatesAreWrong ? 'wrong' : 'candidate';\n    }\n\n    return 'available';\n  };\n\n  const onNumberClick = (number, currentStatus) => {\n    if (gameStatus !== 'active' || currentStatus === 'used') {\n      return;\n    }\n\n    const newCandidateNums = currentStatus === 'available' ? candidateNums.concat(number) : candidateNums.filter(cn => cn !== number);\n    setGameState(newCandidateNums);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col min-h-screen\",\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"help\",\n        children: \"Pick 1 or more numbers that sum to the number of stars\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"body\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left\",\n          children: gameStatus !== 'active' ? /*#__PURE__*/_jsxDEV(PlayAgain, {\n            onClick: props.startNewGame,\n            gameStatus: gameStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(StarsDisplay, {\n            count: stars\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"right\",\n          children: utils.range(1, 9).map(number => /*#__PURE__*/_jsxDEV(ButtonDisplay, {\n            number: number,\n            status: numberStatus(number),\n            onClick: onNumberClick\n          }, number, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer\",\n        children: [\"Time Remaining: \", secondsLeft]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 9\n  }, this);\n};\n\nconst StarMatch = () => {\n  const {\n    0: gameID,\n    1: setGameID\n  } = useState(1);\n  return /*#__PURE__*/_jsxDEV(Game, {\n    startNewGame: () => {\n      setGameID(gameID + 1);\n    }\n  }, gameID, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 12\n  }, this);\n}; // Color Theme\n\n\nconst colors = {\n  available: 'lightgray',\n  used: 'lightgreen',\n  wrong: 'lightcoral',\n  candidate: 'deepskyblue'\n}; // Math science\n\nconst utils = {\n  // Sum an array\n  sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\n  // create an array of numbers between min and max (edges included)\n  range: (min, max) => Array.from({\n    length: max - min + 1\n  }, (_, i) => min + i),\n  // pick a random number between min and max (edges included)\n  random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\n  // Given an array of numbers and a max...\n  // Pick a random sum (< max) from the set of all available sums in arr\n  randomSumIn: (arr, max) => {\n    const sets = [[]];\n    const sums = [];\n\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0, len = sets.length; j < len; j++) {\n        const candidateSet = sets[j].concat(arr[i]);\n        const candidateSum = utils.sum(candidateSet);\n\n        if (candidateSum <= max) {\n          sets.push(candidateSet);\n          sums.push(candidateSum);\n        }\n      }\n    }\n\n    return sums[utils.random(0, sums.length - 1)];\n  }\n};\nexport default StarMatch;","map":{"version":3,"sources":["C:/Users/jheinrich/Desktop/learningReact/pages/star-match.js"],"names":["NavBar","React","useState","useEffect","ReactDOM","StarsDisplay","props","utils","range","count","map","starId","ButtonDisplay","backgroundColor","colors","status","onClick","number","PlayAgain","color","gameStatus","useGameState","stars","setStars","random","availableNums","setAvailableNums","candidateNums","setCandidateNums","secondsLeft","setSecondsLeft","length","timerID","setTimeout","clearTimeout","setGameState","newCandidateNums","sum","newAvailableNums","filter","n","includes","randomSumIn","Game","candidatesAreWrong","numberStatus","onNumberClick","currentStatus","concat","cn","startNewGame","StarMatch","gameID","setGameID","available","used","wrong","candidate","arr","reduce","acc","curr","min","max","Array","from","_","i","Math","floor","sets","sums","j","len","candidateSet","candidateSum","push"],"mappings":"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","sourcesContent":["import NavBar from '../src/components/Navbar/Navbar';\r\nimport React, {useState, useEffect} from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nconst StarsDisplay = props => (\r\n    <>\r\n        {utils.range(1, props.count).map(starId => \r\n            <div key={starId} className=\"star\"></div>\r\n        )}\r\n    </>\r\n);\r\n\r\nconst ButtonDisplay = props => {\r\n    return (\r\n        <button \r\n        style={{backgroundColor: colors[props.status]}} \r\n        className=\"number\" \r\n        onClick={() => props.onClick(props.number, props.status)} \r\n        >\r\n            {props.number}\r\n        </button>\r\n    )\r\n};\r\n\r\nconst PlayAgain = (props) => {\r\n    return (\r\n        <div className=\"game-done\">\r\n            <div \r\n            className=\"message\"\r\n            style={{color: props.gameStatus === 'lost' ? 'red' : 'green'}}\r\n            >\r\n                {props.gameStatus === 'lost' ? 'Game Over' : 'Nice'}\r\n            </div>\r\n            <button onClick={props.onClick}>Play Again</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n//Custom Hook\r\n \r\nconst useGameState = () => {\r\n    const [stars, setStars] = useState(utils.random(1, 9));\r\n    const [availableNums, setAvailableNums] = useState(utils.range(1, 9));\r\n    const [candidateNums, setCandidateNums] = useState([]);\r\n    const [secondsLeft, setSecondsLeft] = useState(10);\r\n    \r\n    useEffect(() => {\r\n        if (secondsLeft > 0 && availableNums.length > 0) {\r\n            const timerID = setTimeout(() => {\r\n                setSecondsLeft(secondsLeft - 1);\r\n            }, 1000);\r\n            return () => clearTimeout(timerID); \r\n        }\r\n    })\r\n\r\n    const setGameState = (newCandidateNums) => {\r\n        if (utils.sum(newCandidateNums) !== stars) {\r\n            setCandidateNums(newCandidateNums);\r\n        } else {\r\n            const newAvailableNums = availableNums.filter(\r\n            n => !newCandidateNums.includes(n)\r\n            );\r\n            setStars(utils.randomSumIn(newAvailableNums, 9));\r\n            setAvailableNums(newAvailableNums);\r\n            setCandidateNums([]);\r\n        }\r\n    }\r\n\r\n    return {stars, availableNums, candidateNums, secondsLeft, setGameState}\r\n}\r\n\r\n\r\nconst Game = (props) => {\r\n    const {\r\n        stars,\r\n        availableNums,\r\n        candidateNums,\r\n        secondsLeft,\r\n        setGameState\r\n    } = useGameState();\r\n\r\n    const candidatesAreWrong = utils.sum(candidateNums) > stars;\r\n\r\n    const gameStatus = availableNums.length === 0\r\n    ? 'won'\r\n    : secondsLeft === 0 ? 'lost' : 'active';\r\n\r\n    const numberStatus = (number) => {\r\n\r\n        if (!availableNums.includes(number)) {\r\n            return 'used';\r\n        }\r\n        if (candidateNums.includes(number)) {\r\n            return candidatesAreWrong ? 'wrong' : 'candidate';\r\n        }\r\n        return 'available';\r\n    }\r\n    \r\n    const onNumberClick = (number, currentStatus) => {\r\n\r\n        if (gameStatus !== 'active' || currentStatus === 'used') {\r\n          return;\r\n        }\r\n    \r\n        const newCandidateNums =\r\n          currentStatus === 'available'\r\n            ? candidateNums.concat(number)\r\n            : candidateNums.filter(cn => cn !== number);\r\n\r\n        setGameState(newCandidateNums);\r\n      };\r\n\r\n    return (\r\n        <div className=\"flex flex-col min-h-screen\">\r\n            <NavBar></NavBar>\r\n            <div className=\"game\">\r\n                <div className=\"help\">\r\n                Pick 1 or more numbers that sum to the number of stars\r\n                </div>\r\n                <div className=\"body\">\r\n                    <div className=\"left\">\r\n                        {gameStatus !== 'active' ? (\r\n                            <PlayAgain onClick={props.startNewGame} gameStatus={gameStatus}/>\r\n                            ) : (\r\n                            <StarsDisplay count={stars} />\r\n                        )}\r\n                    </div>\r\n                    <div className=\"right\">\r\n                        {utils.range(1, 9).map(number => \r\n                            <ButtonDisplay \r\n                                key={number} \r\n                                number={number} \r\n                                status={numberStatus(number)}\r\n                                onClick={onNumberClick}\r\n                            />\r\n                        )}\r\n                    </div>\r\n                </div>\r\n                <div className=\"timer\">Time Remaining: {secondsLeft}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst StarMatch = () => {\r\n    const [gameID, setGameID] = useState(1);\r\n    return <Game key={gameID} startNewGame={() => {setGameID(gameID + 1)}}/>;\r\n}\r\n\r\n\r\n// Color Theme\r\nconst colors = {\r\n    available: 'lightgray',\r\n    used: 'lightgreen',\r\n    wrong: 'lightcoral',\r\n    candidate: 'deepskyblue',\r\n  };\r\n  \r\n  // Math science\r\n  const utils = {\r\n    // Sum an array\r\n    sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\r\n  \r\n    // create an array of numbers between min and max (edges included)\r\n    range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\r\n  \r\n    // pick a random number between min and max (edges included)\r\n    random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\r\n  \r\n    // Given an array of numbers and a max...\r\n    // Pick a random sum (< max) from the set of all available sums in arr\r\n    randomSumIn: (arr, max) => {\r\n      const sets = [[]];\r\n      const sums = [];\r\n      for (let i = 0; i < arr.length; i++) {\r\n        for (let j = 0, len = sets.length; j < len; j++) {\r\n          const candidateSet = sets[j].concat(arr[i]);\r\n          const candidateSum = utils.sum(candidateSet);\r\n          if (candidateSum <= max) {\r\n            sets.push(candidateSet);\r\n            sums.push(candidateSum);\r\n          }\r\n        }\r\n      }\r\n      return sums[utils.random(0, sums.length - 1)];\r\n    },\r\n  };\r\n\r\n  \r\nexport default StarMatch;"]},"metadata":{},"sourceType":"module"}