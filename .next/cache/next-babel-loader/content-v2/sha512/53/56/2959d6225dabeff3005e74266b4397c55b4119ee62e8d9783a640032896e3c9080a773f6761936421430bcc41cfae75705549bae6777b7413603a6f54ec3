{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\jheinrich\\\\Desktop\\\\learningReact\\\\pages\\\\star-match.js\";\nimport NavBar from '../src/components/Navbar/Navbar';\nimport React, { useState, useEffect } from 'react';\n\nconst StarsDisplay = props => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: utils.range(1, props.count).map(starId => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"star\"\n    }, starId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 17\n    }, this))\n  }, void 0, false);\n};\n\nconst StarMatch = () => {\n  const {\n    0: stars,\n    1: setStars\n  } = useState(utils.random(1, 9));\n  const {\n    0: availableNums,\n    1: setAvailableNums\n  } = useState([1, 2, 3, 4, 5]);\n  const {\n    0: candiateNums,\n    1: setCandidateNums\n  } = useState([2, 3]);\n\n  const ButtonDisplay = props => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: utils.range(1, 9).map(number => /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          backgroundColor: colors[props.status]\n        },\n        className: \"number\",\n        onClick: () => console.log(\"Num \", number),\n        children: number\n      }, number, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 21\n      }, this))\n    }, void 0, false);\n  };\n\n  const numberStatus = number => {\n    const candidatesAreWrong = utils.sum(candiateNums) > stars;\n\n    if (!availableNums.includes(number)) {\n      return 'used';\n    }\n\n    if (candiateNums.includes(number)) {\n      return candidatesAreWrong ? 'wrong' : 'candidate';\n    }\n\n    return 'available';\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col min-h-screen\",\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"help\",\n        children: \"Pick 1 or more numbers that sum to the number of stars\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"body\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left\",\n          children: /*#__PURE__*/_jsxDEV(StarsDisplay, {\n            count: stars\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"right\",\n          children: /*#__PURE__*/_jsxDEV(ButtonDisplay, {\n            status: numberStatus(number)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer\",\n        children: \"Time Remaining: 10\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n}; // Color Theme\n\n\nconst colors = {\n  available: 'lightgray',\n  used: 'lightgreen',\n  wrong: 'lightcoral',\n  candidate: 'deepskyblue'\n}; // Math science\n\nconst utils = {\n  // Sum an array\n  sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\n  // create an array of numbers between min and max (edges included)\n  range: (min, max) => Array.from({\n    length: max - min + 1\n  }, (_, i) => min + i),\n  // pick a random number between min and max (edges included)\n  random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\n  // Given an array of numbers and a max...\n  // Pick a random sum (< max) from the set of all available sums in arr\n  randomSumIn: (arr, max) => {\n    const sets = [[]];\n    const sums = [];\n\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0, len = sets.length; j < len; j++) {\n        const candidateSet = sets[j].concat(arr[i]);\n        const candidateSum = utils.sum(candidateSet);\n\n        if (candidateSum <= max) {\n          sets.push(candidateSet);\n          sums.push(candidateSum);\n        }\n      }\n    }\n\n    return sums[utils.random(0, sums.length - 1)];\n  }\n};\nexport default StarMatch;","map":{"version":3,"sources":["C:/Users/jheinrich/Desktop/learningReact/pages/star-match.js"],"names":["NavBar","React","useState","useEffect","StarsDisplay","props","utils","range","count","map","starId","StarMatch","stars","setStars","random","availableNums","setAvailableNums","candiateNums","setCandidateNums","ButtonDisplay","number","backgroundColor","colors","status","console","log","numberStatus","candidatesAreWrong","sum","includes","available","used","wrong","candidate","arr","reduce","acc","curr","min","max","Array","from","length","_","i","Math","floor","randomSumIn","sets","sums","j","len","candidateSet","concat","candidateSum","push"],"mappings":"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","sourcesContent":["import NavBar from '../src/components/Navbar/Navbar';\r\nimport React, {useState, useEffect} from 'react';\r\n\r\nconst StarsDisplay = props => {\r\n    return (\r\n        <>\r\n            {utils.range(1, props.count).map(starId => \r\n                <div key={starId} className=\"star\"></div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nconst StarMatch = () => {\r\n    const [stars, setStars] = useState(utils.random(1, 9));\r\n    const [availableNums, setAvailableNums] = useState([1, 2, 3, 4, 5]);\r\n    const [candiateNums, setCandidateNums] = useState([2, 3]);\r\n\r\n\r\n    const ButtonDisplay = (props) => {\r\n        return (\r\n            <>\r\n                {utils.range(1, 9).map(number => \r\n                    <button key={number} style={{backgroundColor: colors[props.status]}} className=\"number\" onClick={() => console.log(\"Num \", number)}>{number}</button>\r\n                )}\r\n            </>\r\n        );\r\n    };\r\n    \r\n    const numberStatus = (number) => {\r\n        const candidatesAreWrong = utils.sum(candiateNums) > stars;\r\n    \r\n        if (!availableNums.includes(number)) {\r\n            return 'used';\r\n        }\r\n        if (candiateNums.includes(number)) {\r\n            return candidatesAreWrong ? 'wrong' : 'candidate';\r\n        }\r\n        return 'available';\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex flex-col min-h-screen\">\r\n            <NavBar></NavBar>\r\n            <div className=\"game\">\r\n                <div className=\"help\">\r\n                Pick 1 or more numbers that sum to the number of stars\r\n                </div>\r\n                <div className=\"body\">\r\n                    <div className=\"left\">\r\n                        <StarsDisplay count={stars}/>\r\n                    </div>\r\n                    <div className=\"right\">\r\n                        <ButtonDisplay status={numberStatus(number)}/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"timer\">Time Remaining: 10</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n// Color Theme\r\nconst colors = {\r\n    available: 'lightgray',\r\n    used: 'lightgreen',\r\n    wrong: 'lightcoral',\r\n    candidate: 'deepskyblue',\r\n  };\r\n  \r\n  // Math science\r\n  const utils = {\r\n    // Sum an array\r\n    sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\r\n  \r\n    // create an array of numbers between min and max (edges included)\r\n    range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\r\n  \r\n    // pick a random number between min and max (edges included)\r\n    random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\r\n  \r\n    // Given an array of numbers and a max...\r\n    // Pick a random sum (< max) from the set of all available sums in arr\r\n    randomSumIn: (arr, max) => {\r\n      const sets = [[]];\r\n      const sums = [];\r\n      for (let i = 0; i < arr.length; i++) {\r\n        for (let j = 0, len = sets.length; j < len; j++) {\r\n          const candidateSet = sets[j].concat(arr[i]);\r\n          const candidateSum = utils.sum(candidateSet);\r\n          if (candidateSum <= max) {\r\n            sets.push(candidateSet);\r\n            sums.push(candidateSum);\r\n          }\r\n        }\r\n      }\r\n      return sums[utils.random(0, sums.length - 1)];\r\n    },\r\n  };\r\n\r\nexport default StarMatch;"]},"metadata":{},"sourceType":"module"}