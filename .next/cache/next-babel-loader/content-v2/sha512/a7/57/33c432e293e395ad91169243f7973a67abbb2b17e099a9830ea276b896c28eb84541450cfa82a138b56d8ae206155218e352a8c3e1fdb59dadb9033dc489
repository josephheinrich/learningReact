{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport NavBar from '../src/components/Navbar/Navbar';\nimport React, { useState, useEffect } from 'react';\nimport utils from '../utilities/utils';\n\nconst StarsDisplay = props => /*#__PURE__*/_jsx(_Fragment, {\n  children: utils.range(1, props.count).map(starId => /*#__PURE__*/_jsx(\"div\", {\n    className: \"star\"\n  }, starId))\n});\n\nconst ButtonDisplay = props => {\n  return /*#__PURE__*/_jsx(\"button\", {\n    style: {\n      backgroundColor: colors[props.status]\n    },\n    className: \"number\",\n    onClick: () => props.onClick(props.number, props.status),\n    children: props.number\n  });\n};\n\nconst PlayAgain = props => {\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: \"game-done\",\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      className: \"message\",\n      style: {\n        color: props.gameStatus === 'lost' ? 'red' : 'green'\n      },\n      children: props.gameStatus === 'lost' ? 'Game Over' : 'Nice'\n    }), /*#__PURE__*/_jsx(\"button\", {\n      className: \"bg-gray-700 p-2 text-white rounded\",\n      onClick: props.onClick,\n      children: \"Play Again\"\n    })]\n  });\n}; //Custom Hook\n\n\nconst useGameState = () => {\n  const {\n    0: stars,\n    1: setStars\n  } = useState(utils.random(1, 9));\n  const {\n    0: availableNums,\n    1: setAvailableNums\n  } = useState(utils.range(1, 9));\n  const {\n    0: candidateNums,\n    1: setCandidateNums\n  } = useState([]);\n  const {\n    0: secondsLeft,\n    1: setSecondsLeft\n  } = useState(10);\n  useEffect(() => {\n    if (secondsLeft > 0 && availableNums.length > 0) {\n      const timerID = setTimeout(() => {\n        setSecondsLeft(secondsLeft - 1);\n      }, 1000);\n      return () => clearTimeout(timerID);\n    }\n  });\n\n  const setGameState = newCandidateNums => {\n    if (utils.sum(newCandidateNums) !== stars) {\n      setCandidateNums(newCandidateNums);\n    } else {\n      const newAvailableNums = availableNums.filter(n => !newCandidateNums.includes(n));\n      setStars(utils.randomSumIn(newAvailableNums, 9));\n      setAvailableNums(newAvailableNums);\n      setCandidateNums([]);\n    }\n  };\n\n  return {\n    stars,\n    availableNums,\n    candidateNums,\n    secondsLeft,\n    setGameState\n  };\n};\n\nconst Game = props => {\n  const {\n    stars,\n    availableNums,\n    candidateNums,\n    secondsLeft,\n    setGameState\n  } = useGameState();\n  const candidatesAreWrong = utils.sum(candidateNums) > stars;\n  const gameStatus = availableNums.length === 0 ? 'won' : secondsLeft === 0 ? 'lost' : 'active';\n\n  const numberStatus = number => {\n    if (!availableNums.includes(number)) {\n      return 'used';\n    }\n\n    if (candidateNums.includes(number)) {\n      return candidatesAreWrong ? 'wrong' : 'candidate';\n    }\n\n    return 'available';\n  };\n\n  const onNumberClick = (number, currentStatus) => {\n    if (gameStatus !== 'active' || currentStatus === 'used') {\n      return;\n    }\n\n    const newCandidateNums = currentStatus === 'available' ? candidateNums.concat(number) : candidateNums.filter(cn => cn !== number);\n    setGameState(newCandidateNums);\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: \"flex flex-col min-h-screen\",\n    children: [/*#__PURE__*/_jsx(NavBar, {}), /*#__PURE__*/_jsxs(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: \"help\",\n        children: \"Pick 1 or more numbers that sum to the number of stars\"\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: \"body\",\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: \"left\",\n          children: gameStatus !== 'active' ? /*#__PURE__*/_jsx(PlayAgain, {\n            onClick: props.startNewGame,\n            gameStatus: gameStatus\n          }) : /*#__PURE__*/_jsx(StarsDisplay, {\n            count: stars\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: \"right\",\n          children: utils.range(1, 9).map(number => /*#__PURE__*/_jsx(ButtonDisplay, {\n            number: number,\n            status: numberStatus(number),\n            onClick: onNumberClick\n          }, number))\n        })]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: \"timer\",\n        children: [\"Time Remaining: \", secondsLeft]\n      })]\n    })]\n  });\n};\n\nconst StarMatch = () => {\n  const {\n    0: gameID,\n    1: setGameID\n  } = useState(1);\n  return /*#__PURE__*/_jsx(Game, {\n    startNewGame: () => {\n      setGameID(gameID + 1);\n    }\n  }, gameID);\n}; // Color Theme\n\n\nconst colors = {\n  available: 'lightgray',\n  used: 'lightgreen',\n  wrong: 'lightcoral',\n  candidate: 'deepskyblue'\n};\nexport default StarMatch;","map":null,"metadata":{},"sourceType":"module"}