{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\jheinrich\\\\Desktop\\\\learningReact\\\\pages\\\\star-match.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport NavBar from '../src/components/Navbar/Navbar';\nimport React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nvar StarsDisplay = function StarsDisplay(props) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: utils.range(1, props.count).map(function (starId) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"star\"\n      }, starId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 13\n      }, _this);\n    })\n  }, void 0, false);\n};\n\n_c = StarsDisplay;\n\nvar ButtonDisplay = function ButtonDisplay(props) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    style: {\n      backgroundColor: colors[props.status]\n    },\n    className: \"number\",\n    onClick: function onClick() {\n      return props.onClick(props.number, props.status);\n    },\n    children: props.number\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, _this);\n};\n\n_c2 = ButtonDisplay;\n\nvar PlayAgain = function PlayAgain(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-done\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: props.onClick,\n      children: \"Play Again\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, _this);\n};\n\n_c3 = PlayAgain;\n\nvar StarMatch = function StarMatch() {\n  _s();\n\n  //hooks into state\n  //hooks into sideeffects\n  //computations based on state\n  var _useState = useState(utils.random(1, 9)),\n      stars = _useState[0],\n      setStars = _useState[1];\n\n  var _useState2 = useState(utils.range(1, 9)),\n      availableNums = _useState2[0],\n      setAvailableNums = _useState2[1];\n\n  var _useState3 = useState([]),\n      candidateNums = _useState3[0],\n      setCandidateNums = _useState3[1];\n\n  var _useState4 = useState(10),\n      secondsLeft = _useState4[0],\n      setSecondsLeft = _useState4[1];\n\n  useEffect(function () {\n    if (secondsLeft > 0) {\n      console.log(\"Rendered...\");\n      var timerID = setTimeout(function () {\n        setSecondsLeft(secondsLeft - 1);\n      }, 1000);\n    }\n  });\n  var candidatesAreWrong = utils.sum(candidateNums) > stars;\n  var gameisDone = availableNums.length === 0;\n\n  var resetGame = function resetGame() {\n    setStars(utils.random(1, 9));\n    setAvailableNums(utils.range(1, 9));\n    setCandidateNums([]);\n  };\n\n  var numberStatus = function numberStatus(number) {\n    if (!availableNums.includes(number)) {\n      return 'used';\n    }\n\n    if (candidateNums.includes(number)) {\n      return candidatesAreWrong ? 'wrong' : 'candidate';\n    }\n\n    return 'available';\n  };\n\n  var onNumberClick = function onNumberClick(number, currentStatus) {\n    if (currentStatus === 'used') {\n      return;\n    }\n\n    var newCandidateNums = currentStatus === 'available' ? candidateNums.concat(number) : candidateNums.filter(function (cn) {\n      return cn !== number;\n    });\n\n    if (utils.sum(newCandidateNums) !== stars) {\n      setCandidateNums(newCandidateNums);\n    } else {\n      var newAvailableNums = availableNums.filter(function (n) {\n        return !newCandidateNums.includes(n);\n      });\n      setStars(utils.randomSumIn(newAvailableNums, 9));\n      setAvailableNums(newAvailableNums);\n      setCandidateNums([]);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col min-h-screen\",\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"help\",\n        children: \"Pick 1 or more numbers that sum to the number of stars\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"body\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left\",\n          children: gameisDone ? /*#__PURE__*/_jsxDEV(PlayAgain, {\n            onClick: resetGame\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 29\n          }, _this) : /*#__PURE__*/_jsxDEV(StarsDisplay, {\n            count: stars\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 29\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"right\",\n          children: utils.range(1, 9).map(function (number) {\n            return /*#__PURE__*/_jsxDEV(ButtonDisplay, {\n              number: number,\n              status: numberStatus(number),\n              onClick: onNumberClick\n            }, number, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 29\n            }, _this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer\",\n        children: [\"Time Remaining: \", secondsLeft]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, _this);\n}; // Color Theme\n\n\n_s(StarMatch, \"+C/LvG7qkPd5YTZ59/XKdcLBwGo=\");\n\n_c4 = StarMatch;\nvar colors = {\n  available: 'lightgray',\n  used: 'lightgreen',\n  wrong: 'lightcoral',\n  candidate: 'deepskyblue'\n}; // Math science\n\nvar utils = {\n  // Sum an array\n  sum: function sum(arr) {\n    return arr.reduce(function (acc, curr) {\n      return acc + curr;\n    }, 0);\n  },\n  // create an array of numbers between min and max (edges included)\n  range: function range(min, max) {\n    return Array.from({\n      length: max - min + 1\n    }, function (_, i) {\n      return min + i;\n    });\n  },\n  // pick a random number between min and max (edges included)\n  random: function random(min, max) {\n    return min + Math.floor(Math.random() * (max - min + 1));\n  },\n  // Given an array of numbers and a max...\n  // Pick a random sum (< max) from the set of all available sums in arr\n  randomSumIn: function randomSumIn(arr, max) {\n    var sets = [[]];\n    var sums = [];\n\n    for (var i = 0; i < arr.length; i++) {\n      for (var j = 0, len = sets.length; j < len; j++) {\n        var candidateSet = sets[j].concat(arr[i]);\n        var candidateSum = utils.sum(candidateSet);\n\n        if (candidateSum <= max) {\n          sets.push(candidateSet);\n          sums.push(candidateSum);\n        }\n      }\n    }\n\n    return sums[utils.random(0, sums.length - 1)];\n  }\n};\nexport default StarMatch;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"StarsDisplay\");\n$RefreshReg$(_c2, \"ButtonDisplay\");\n$RefreshReg$(_c3, \"PlayAgain\");\n$RefreshReg$(_c4, \"StarMatch\");","map":{"version":3,"sources":["C:/Users/jheinrich/Desktop/learningReact/pages/star-match.js"],"names":["NavBar","React","useState","useEffect","ReactDOM","StarsDisplay","props","utils","range","count","map","starId","ButtonDisplay","backgroundColor","colors","status","onClick","number","PlayAgain","StarMatch","random","stars","setStars","availableNums","setAvailableNums","candidateNums","setCandidateNums","secondsLeft","setSecondsLeft","console","log","timerID","setTimeout","candidatesAreWrong","sum","gameisDone","length","resetGame","numberStatus","includes","onNumberClick","currentStatus","newCandidateNums","concat","filter","cn","newAvailableNums","n","randomSumIn","available","used","wrong","candidate","arr","reduce","acc","curr","min","max","Array","from","_","i","Math","floor","sets","sums","j","len","candidateSet","candidateSum","push"],"mappings":"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","sourcesContent":["import NavBar from '../src/components/Navbar/Navbar';\r\nimport React, {useState, useEffect} from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nconst StarsDisplay = props => (\r\n    <>\r\n        {utils.range(1, props.count).map(starId => \r\n            <div key={starId} className=\"star\"></div>\r\n        )}\r\n    </>\r\n);\r\n\r\nconst ButtonDisplay = props => {\r\n    return (\r\n        <button \r\n        style={{backgroundColor: colors[props.status]}} \r\n        className=\"number\" \r\n        onClick={() => props.onClick(props.number, props.status)} \r\n        >\r\n            {props.number}\r\n        </button>\r\n    )\r\n};\r\n\r\nconst PlayAgain = (props) => {\r\n    return (\r\n        <div className=\"game-done\">\r\n            <button onClick={props.onClick}>Play Again</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst StarMatch = () => {\r\n    //hooks into state\r\n    //hooks into sideeffects\r\n    //computations based on state\r\n    const [stars, setStars] = useState(utils.random(1, 9));\r\n    const [availableNums, setAvailableNums] = useState(utils.range(1, 9));\r\n    const [candidateNums, setCandidateNums] = useState([]);\r\n    const [secondsLeft, setSecondsLeft] = useState(10);\r\n    \r\n    useEffect(() => {\r\n        if (secondsLeft > 0) {\r\n            console.log(\"Rendered...\");\r\n            const timerID = setTimeout(() => {\r\n                setSecondsLeft(secondsLeft - 1);\r\n            }, 1000);\r\n        }\r\n    })\r\n\r\n    const candidatesAreWrong = utils.sum(candidateNums) > stars;\r\n    const gameisDone = availableNums.length === 0;\r\n\r\n\r\n    const resetGame = () => {\r\n        setStars(utils.random(1, 9));\r\n        setAvailableNums(utils.range(1, 9));\r\n        setCandidateNums([]);\r\n    }\r\n\r\n    const numberStatus = (number) => {\r\n\r\n        if (!availableNums.includes(number)) {\r\n            return 'used';\r\n        }\r\n        if (candidateNums.includes(number)) {\r\n            return candidatesAreWrong ? 'wrong' : 'candidate';\r\n        }\r\n        return 'available';\r\n    }\r\n    \r\n    const onNumberClick = (number, currentStatus) => {\r\n\r\n        if (currentStatus === 'used') {\r\n          return;\r\n        }\r\n    \r\n        const newCandidateNums =\r\n          currentStatus === 'available'\r\n            ? candidateNums.concat(number)\r\n            : candidateNums.filter(cn => cn !== number);\r\n    \r\n        if (utils.sum(newCandidateNums) !== stars) {\r\n          setCandidateNums(newCandidateNums);\r\n        } else {\r\n          const newAvailableNums = availableNums.filter(\r\n            n => !newCandidateNums.includes(n)\r\n          );\r\n          setStars(utils.randomSumIn(newAvailableNums, 9));\r\n          setAvailableNums(newAvailableNums);\r\n          setCandidateNums([]);\r\n        }\r\n      };\r\n\r\n    return (\r\n        <div className=\"flex flex-col min-h-screen\">\r\n            <NavBar></NavBar>\r\n            <div className=\"game\">\r\n                <div className=\"help\">\r\n                Pick 1 or more numbers that sum to the number of stars\r\n                </div>\r\n                <div className=\"body\">\r\n                    <div className=\"left\">\r\n                        {gameisDone ? (\r\n                            <PlayAgain onClick={resetGame}/>\r\n                            ) : (\r\n                            <StarsDisplay count={stars} />\r\n                        )}\r\n                    </div>\r\n                    <div className=\"right\">\r\n                        {utils.range(1, 9).map(number => \r\n                            <ButtonDisplay \r\n                                key={number} \r\n                                number={number} \r\n                                status={numberStatus(number)}\r\n                                onClick={onNumberClick}\r\n                            />\r\n                        )}\r\n                    </div>\r\n                </div>\r\n                <div className=\"timer\">Time Remaining: {secondsLeft}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n// Color Theme\r\nconst colors = {\r\n    available: 'lightgray',\r\n    used: 'lightgreen',\r\n    wrong: 'lightcoral',\r\n    candidate: 'deepskyblue',\r\n  };\r\n  \r\n  // Math science\r\n  const utils = {\r\n    // Sum an array\r\n    sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\r\n  \r\n    // create an array of numbers between min and max (edges included)\r\n    range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\r\n  \r\n    // pick a random number between min and max (edges included)\r\n    random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\r\n  \r\n    // Given an array of numbers and a max...\r\n    // Pick a random sum (< max) from the set of all available sums in arr\r\n    randomSumIn: (arr, max) => {\r\n      const sets = [[]];\r\n      const sums = [];\r\n      for (let i = 0; i < arr.length; i++) {\r\n        for (let j = 0, len = sets.length; j < len; j++) {\r\n          const candidateSet = sets[j].concat(arr[i]);\r\n          const candidateSum = utils.sum(candidateSet);\r\n          if (candidateSum <= max) {\r\n            sets.push(candidateSet);\r\n            sums.push(candidateSum);\r\n          }\r\n        }\r\n      }\r\n      return sums[utils.random(0, sums.length - 1)];\r\n    },\r\n  };\r\n\r\n  \r\nexport default StarMatch;"]},"metadata":{},"sourceType":"module"}