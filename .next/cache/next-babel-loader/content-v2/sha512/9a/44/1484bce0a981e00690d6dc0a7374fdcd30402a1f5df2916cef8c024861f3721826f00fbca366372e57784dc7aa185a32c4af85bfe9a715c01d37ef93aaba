{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\jheinrich\\\\Desktop\\\\learningReact\\\\pages\\\\star-match.js\";\nimport NavBar from '../src/components/Navbar/Navbar';\nimport React, { useState, useEffect, useCallback } from 'react';\nimport utils from '../utilities/utils';\n\nconst StarsDisplay = props => /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: utils.range(1, props.count).map(starId => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"star inline-block mx-3 my-1\"\n  }, starId, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 13\n  }, this))\n}, void 0, false);\n\nconst ButtonDisplay = props => {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    style: {\n      backgroundColor: colors[props.status]\n    },\n    className: \"bg-gray-200 border border-solid border-gray-500 w-12 h-12 text-lg m-2 rounded\",\n    onClick: () => props.onClick(props.number, props.status),\n    children: props.number\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this);\n};\n\nconst PlayAgain = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-4xl text-center mb-4\",\n      style: {\n        color: props.gameStatus === 'lost' ? 'red' : 'green'\n      },\n      children: props.gameStatus === 'lost' ? 'Game Over' : 'Nice'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"bg-gray-700 p-2 text-white rounded\",\n      onClick: props.onClick,\n      children: \"Play Again\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n}; //Custom Hook\n\n\nconst useGameState = () => {\n  const {\n    0: stars,\n    1: setStars\n  } = useState(utils.random(1, 9));\n  const {\n    0: availableNums,\n    1: setAvailableNums\n  } = useState(utils.range(1, 9));\n  const {\n    0: candidateNums,\n    1: setCandidateNums\n  } = useState([]);\n  const {\n    0: secondsLeft,\n    1: setSecondsLeft\n  } = useState(10);\n  useEffect(() => {\n    if (secondsLeft > 0 && availableNums.length > 0) {\n      const timerID = setTimeout(() => {\n        setSecondsLeft(secondsLeft - 1);\n      }, 1000);\n      return () => clearTimeout(timerID);\n    }\n  });\n\n  const setGameState = newCandidateNums => {\n    if (utils.sum(newCandidateNums) !== stars) {\n      setCandidateNums(newCandidateNums);\n    } else {\n      const newAvailableNums = availableNums.filter(n => !newCandidateNums.includes(n));\n      setStars(utils.randomSumIn(newAvailableNums, 9));\n      setAvailableNums(newAvailableNums);\n      setCandidateNums([]);\n    }\n  };\n\n  return {\n    stars,\n    availableNums,\n    candidateNums,\n    secondsLeft,\n    setGameState\n  };\n};\n\nconst Game = props => {\n  const {\n    stars,\n    availableNums,\n    candidateNums,\n    secondsLeft,\n    setGameState\n  } = useGameState();\n  const candidatesAreWrong = utils.sum(candidateNums) > stars;\n  const gameStatus = availableNums.length === 0 ? 'won' : secondsLeft === 0 ? 'lost' : 'active';\n\n  const numberStatus = number => {\n    if (!availableNums.includes(number)) {\n      return 'used';\n    }\n\n    if (candidateNums.includes(number)) {\n      return candidatesAreWrong ? 'wrong' : 'candidate';\n    }\n\n    return 'available';\n  };\n\n  const onNumberClick = (number, currentStatus) => {\n    if (gameStatus !== 'active' || currentStatus === 'used') {\n      return;\n    }\n\n    const newCandidateNums = currentStatus === 'available' ? candidateNums.concat(number) : candidateNums.filter(cn => cn !== number);\n    setGameState(newCandidateNums);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col min-h-screen\",\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"help\",\n        children: \"Pick 1 or more numbers that sum to the number of stars\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"body\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-wrap text-center justify-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"h-60 w-60 border-solid border-gray-300 border-2 flex-wrap\",\n            children: gameStatus !== 'active' ? /*#__PURE__*/_jsxDEV(PlayAgain, {\n              onClick: props.startNewGame,\n              gameStatus: gameStatus\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 33\n            }, this) : /*#__PURE__*/_jsxDEV(StarsDisplay, {\n              count: stars\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid grid-cols-3 gap-2 px-4 justify-items-center content-center h-60 w-60 border-solid border-gray-300 border-2\",\n            children: utils.range(1, 9).map(number => /*#__PURE__*/_jsxDEV(ButtonDisplay, {\n              number: number,\n              status: numberStatus(number),\n              onClick: onNumberClick\n            }, number, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-2 text-gray-600 inline-block\",\n        children: [\"Time Left: \", secondsLeft]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-blue-800 mt-2 text-center w-40 h-6 rounded\",\n        style: {\n          width: secondsLeft / 10 * 100\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 9\n  }, this);\n};\n\nconst StarMatch = () => {\n  const {\n    0: gameID,\n    1: setGameID\n  } = useState(1);\n  return /*#__PURE__*/_jsxDEV(Game, {\n    startNewGame: () => {\n      setGameID(gameID + 1);\n    }\n  }, gameID, false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 12\n  }, this);\n}; // Color Theme\n\n\nconst colors = {\n  available: 'lightgray',\n  used: 'lightgreen',\n  wrong: 'lightcoral',\n  candidate: 'deepskyblue'\n};\nexport default StarMatch;","map":{"version":3,"sources":["C:/Users/jheinrich/Desktop/learningReact/pages/star-match.js"],"names":["NavBar","React","useState","useEffect","useCallback","utils","StarsDisplay","props","range","count","map","starId","ButtonDisplay","backgroundColor","colors","status","onClick","number","PlayAgain","color","gameStatus","useGameState","stars","setStars","random","availableNums","setAvailableNums","candidateNums","setCandidateNums","secondsLeft","setSecondsLeft","length","timerID","setTimeout","clearTimeout","setGameState","newCandidateNums","sum","newAvailableNums","filter","n","includes","randomSumIn","Game","candidatesAreWrong","numberStatus","onNumberClick","currentStatus","concat","cn","startNewGame","width","StarMatch","gameID","setGameID","available","used","wrong","candidate"],"mappings":"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","sourcesContent":["import NavBar from '../src/components/Navbar/Navbar';\r\nimport React, {useState, useEffect, useCallback} from 'react';\r\nimport utils from '../utilities/utils';\r\n\r\nconst StarsDisplay = props => (\r\n    <>\r\n        {utils.range(1, props.count).map(starId => \r\n            <div key={starId} className=\"star inline-block mx-3 my-1\"></div>\r\n        )}\r\n    </>\r\n);\r\n\r\nconst ButtonDisplay = props => {\r\n    return (\r\n        <button \r\n        style={{backgroundColor: colors[props.status]}} \r\n        className=\"bg-gray-200 border border-solid border-gray-500 w-12 h-12 text-lg m-2 rounded\" \r\n        onClick={() => props.onClick(props.number, props.status)} \r\n        >\r\n            {props.number}\r\n        </button>\r\n    )\r\n};\r\n\r\nconst PlayAgain = (props) => {\r\n    return (\r\n        <div>\r\n            <div \r\n            className=\"text-4xl text-center mb-4\"\r\n            style={{color: props.gameStatus === 'lost' ? 'red' : 'green'}}\r\n            >\r\n                {props.gameStatus === 'lost' ? 'Game Over' : 'Nice'}\r\n            </div>\r\n            <button className=\"bg-gray-700 p-2 text-white rounded\" onClick={props.onClick}>Play Again</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n//Custom Hook\r\n \r\nconst useGameState = () => {\r\n    const [stars, setStars] = useState(utils.random(1, 9));\r\n    const [availableNums, setAvailableNums] = useState(utils.range(1, 9));\r\n    const [candidateNums, setCandidateNums] = useState([]);\r\n    const [secondsLeft, setSecondsLeft] = useState(10);\r\n    \r\n    useEffect(() => {\r\n        if (secondsLeft > 0 && availableNums.length > 0) {\r\n            const timerID = setTimeout(() => {\r\n                setSecondsLeft(secondsLeft - 1);\r\n            }, 1000);\r\n            return () => clearTimeout(timerID); \r\n        }\r\n    })\r\n\r\n    const setGameState = (newCandidateNums) => {\r\n        if (utils.sum(newCandidateNums) !== stars) {\r\n            setCandidateNums(newCandidateNums);\r\n        } else {\r\n            const newAvailableNums = availableNums.filter(\r\n            n => !newCandidateNums.includes(n)\r\n            );\r\n            setStars(utils.randomSumIn(newAvailableNums, 9));\r\n            setAvailableNums(newAvailableNums);\r\n            setCandidateNums([]);\r\n        }\r\n    }\r\n\r\n    return {stars, availableNums, candidateNums, secondsLeft, setGameState}\r\n}\r\n\r\n\r\nconst Game = (props) => {\r\n    const {\r\n        stars,\r\n        availableNums,\r\n        candidateNums,\r\n        secondsLeft,\r\n        setGameState\r\n    } = useGameState();\r\n\r\n    const candidatesAreWrong = utils.sum(candidateNums) > stars;\r\n\r\n    const gameStatus = availableNums.length === 0\r\n    ? 'won'\r\n    : secondsLeft === 0 ? 'lost' : 'active';\r\n\r\n    const numberStatus = (number) => {\r\n\r\n        if (!availableNums.includes(number)) {\r\n            return 'used';\r\n        }\r\n        if (candidateNums.includes(number)) {\r\n            return candidatesAreWrong ? 'wrong' : 'candidate';\r\n        }\r\n        return 'available';\r\n    }\r\n    \r\n    const onNumberClick = (number, currentStatus) => {\r\n\r\n        if (gameStatus !== 'active' || currentStatus === 'used') {\r\n          return;\r\n        }\r\n    \r\n        const newCandidateNums =\r\n          currentStatus === 'available'\r\n            ? candidateNums.concat(number)\r\n            : candidateNums.filter(cn => cn !== number);\r\n\r\n        setGameState(newCandidateNums);\r\n      };\r\n\r\n\r\n    return (\r\n        <div className=\"flex flex-col min-h-screen\">\r\n            <NavBar></NavBar>\r\n            <div className=\"game\">\r\n                <div className=\"help\">\r\n                Pick 1 or more numbers that sum to the number of stars\r\n                </div>\r\n                <div className=\"body\">\r\n                    <div className=\"flex flex-wrap text-center justify-center\">\r\n                        <div className=\"h-60 w-60 border-solid border-gray-300 border-2 flex-wrap\">\r\n                            {gameStatus !== 'active' ? (\r\n                                <PlayAgain onClick={props.startNewGame} gameStatus={gameStatus}/>\r\n                                ) : (\r\n                                <StarsDisplay count={stars} />\r\n                            )}\r\n                        </div>\r\n                        <div className=\"grid grid-cols-3 gap-2 px-4 justify-items-center content-center h-60 w-60 border-solid border-gray-300 border-2\">\r\n                            {utils.range(1, 9).map(number => \r\n                                <ButtonDisplay \r\n                                    key={number} \r\n                                    number={number} \r\n                                    status={numberStatus(number)}\r\n                                    onClick={onNumberClick}\r\n                                />\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"mt-2 text-gray-600 inline-block\">Time Left: {secondsLeft}</div>\r\n                <div className=\"bg-blue-800 mt-2 text-center w-40 h-6 rounded\" style={{width: (secondsLeft/10)*100}}></div> \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst StarMatch = () => {\r\n    const [gameID, setGameID] = useState(1);\r\n    return <Game key={gameID} startNewGame={() => {setGameID(gameID + 1)}}/>;\r\n}\r\n\r\n\r\n// Color Theme\r\nconst colors = {\r\n    available: 'lightgray',\r\n    used: 'lightgreen',\r\n    wrong: 'lightcoral',\r\n    candidate: 'deepskyblue',\r\n  };\r\n\r\n  \r\nexport default StarMatch;"]},"metadata":{},"sourceType":"module"}