{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport NavBar from '../src/components/Navbar/Navbar';\nimport React, { useState, useEffect } from 'react';\nimport utils from '../utilities/utils';\n\nvar StarsDisplay = function StarsDisplay(props) {\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: utils.range(1, props.count).map(function (starId) {\n      return /*#__PURE__*/_jsx(\"div\", {\n        className: \"star\"\n      }, starId);\n    })\n  });\n};\n\nvar ButtonDisplay = function ButtonDisplay(props) {\n  return /*#__PURE__*/_jsx(\"button\", {\n    style: {\n      backgroundColor: colors[props.status]\n    },\n    className: \"number\",\n    onClick: function onClick() {\n      return props.onClick(props.number, props.status);\n    },\n    children: props.number\n  });\n};\n\nvar PlayAgain = function PlayAgain(props) {\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: \"game-done\",\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      className: \"message\",\n      style: {\n        color: props.gameStatus === 'lost' ? 'red' : 'green'\n      },\n      children: props.gameStatus === 'lost' ? 'Game Over' : 'Nice'\n    }), /*#__PURE__*/_jsx(\"button\", {\n      className: \"bg-gray-700 p-2 text-white rounded\",\n      onClick: props.onClick,\n      children: \"Play Again\"\n    })]\n  });\n}; //Custom Hook\n\n\nvar useGameState = function useGameState() {\n  var _useState = useState(utils.random(1, 9)),\n      stars = _useState[0],\n      setStars = _useState[1];\n\n  var _useState2 = useState(utils.range(1, 9)),\n      availableNums = _useState2[0],\n      setAvailableNums = _useState2[1];\n\n  var _useState3 = useState([]),\n      candidateNums = _useState3[0],\n      setCandidateNums = _useState3[1];\n\n  var _useState4 = useState(10),\n      secondsLeft = _useState4[0],\n      setSecondsLeft = _useState4[1];\n\n  useEffect(function () {\n    if (secondsLeft > 0 && availableNums.length > 0) {\n      var timerID = setTimeout(function () {\n        setSecondsLeft(secondsLeft - 1);\n      }, 1000);\n      return function () {\n        return clearTimeout(timerID);\n      };\n    }\n  });\n\n  var setGameState = function setGameState(newCandidateNums) {\n    if (utils.sum(newCandidateNums) !== stars) {\n      setCandidateNums(newCandidateNums);\n    } else {\n      var newAvailableNums = availableNums.filter(function (n) {\n        return !newCandidateNums.includes(n);\n      });\n      setStars(utils.randomSumIn(newAvailableNums, 9));\n      setAvailableNums(newAvailableNums);\n      setCandidateNums([]);\n    }\n  };\n\n  return {\n    stars: stars,\n    availableNums: availableNums,\n    candidateNums: candidateNums,\n    secondsLeft: secondsLeft,\n    setGameState: setGameState\n  };\n};\n\nvar Game = function Game(props) {\n  var _useGameState = useGameState(),\n      stars = _useGameState.stars,\n      availableNums = _useGameState.availableNums,\n      candidateNums = _useGameState.candidateNums,\n      secondsLeft = _useGameState.secondsLeft,\n      setGameState = _useGameState.setGameState;\n\n  var candidatesAreWrong = utils.sum(candidateNums) > stars;\n  var gameStatus = availableNums.length === 0 ? 'won' : secondsLeft === 0 ? 'lost' : 'active';\n\n  var numberStatus = function numberStatus(number) {\n    if (!availableNums.includes(number)) {\n      return 'used';\n    }\n\n    if (candidateNums.includes(number)) {\n      return candidatesAreWrong ? 'wrong' : 'candidate';\n    }\n\n    return 'available';\n  };\n\n  var onNumberClick = function onNumberClick(number, currentStatus) {\n    if (gameStatus !== 'active' || currentStatus === 'used') {\n      return;\n    }\n\n    var newCandidateNums = currentStatus === 'available' ? candidateNums.concat(number) : candidateNums.filter(function (cn) {\n      return cn !== number;\n    });\n    setGameState(newCandidateNums);\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: \"flex flex-col min-h-screen\",\n    children: [/*#__PURE__*/_jsx(NavBar, {}), /*#__PURE__*/_jsxs(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: \"help\",\n        children: \"Pick 1 or more numbers that sum to the number of stars\"\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: \"body\",\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: \"left\",\n          children: gameStatus !== 'active' ? /*#__PURE__*/_jsx(PlayAgain, {\n            onClick: props.startNewGame,\n            gameStatus: gameStatus\n          }) : /*#__PURE__*/_jsx(StarsDisplay, {\n            count: stars\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: \"right\",\n          children: utils.range(1, 9).map(function (number) {\n            return /*#__PURE__*/_jsx(ButtonDisplay, {\n              number: number,\n              status: numberStatus(number),\n              onClick: onNumberClick\n            }, number);\n          })\n        })]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: \"timer\",\n        children: [\"Time Remaining: \", secondsLeft]\n      })]\n    })]\n  });\n};\n\nvar StarMatch = function StarMatch() {\n  var _useState5 = useState(1),\n      gameID = _useState5[0],\n      setGameID = _useState5[1];\n\n  return /*#__PURE__*/_jsx(Game, {\n    startNewGame: function startNewGame() {\n      setGameID(gameID + 1);\n    }\n  }, gameID);\n}; // Color Theme\n\n\nvar colors = {\n  available: 'lightgray',\n  used: 'lightgreen',\n  wrong: 'lightcoral',\n  candidate: 'deepskyblue'\n};\nexport default StarMatch;","map":null,"metadata":{},"sourceType":"module"}