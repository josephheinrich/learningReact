{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction CryptoRenderProps(props) {\n  const {\n    0: cryptoData,\n    1: setCryptoData\n  } = useState({\n    btcData: [],\n    ethData: [],\n    bchData: []\n  });\n  const {\n    0: cryptoInfo,\n    1: setCryptoInfo\n  } = useState([]);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n\n  const fetchData = () => {\n    setIsLoading(true);\n    const btcURL = \"https://api.coinbase.com/v2/prices/BTC-USD/buy\";\n    const ethURL = \"https://api.coinbase.com/v2/prices/ETH-USD/buy\";\n    const bchURL = \"https://api.coinbase.com/v2/prices/BCH-USD/buy\";\n    Promise.all([axios.get(btcURL), axios.get(ethURL), axios.get(bchURL)]).then(results => {\n      setCryptoData({\n        btcData: results[0].data.data,\n        ethData: results[1].data.data,\n        bchData: results[2].data.data\n      });\n      setIsLoading(false);\n      setCryptoInfo([results[0].data.data, results[1].data.data, results[2].data.data]);\n    }).catch(err => {\n      console.log(err);\n      setIsLoading(true);\n    });\n  };\n\n  useEffect(() => {\n    setCryptoData({\n      isLoading: true\n    });\n    fetchData();\n  }, []);\n  var keys = Object.keys(cryptoData);\n  var rows = [];\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    rows.push(cryptoData[key]);\n  }\n\n  return props.children({\n    rows: rows,\n    isLoading: isLoading\n  });\n}\n\nexport default CryptoRenderProps;","map":null,"metadata":{},"sourceType":"module"}