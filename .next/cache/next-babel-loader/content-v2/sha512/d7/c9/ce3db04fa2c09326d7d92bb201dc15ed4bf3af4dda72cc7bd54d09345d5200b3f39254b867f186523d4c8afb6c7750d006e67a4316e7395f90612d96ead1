{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\jheinrich\\\\Desktop\\\\learningReact\\\\pages\\\\star-match.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport NavBar from '../src/components/Navbar/Navbar';\nimport React, { useState, useEffect } from 'react';\n\nvar StarsDisplay = function StarsDisplay(props) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: utils.range(1, props.count).map(function (starId) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"star\"\n      }, starId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 17\n      }, _this);\n    })\n  }, void 0, false);\n};\n\n_c = StarsDisplay;\n\nvar ButtonDisplay = function ButtonDisplay(props) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: utils.range(1, 9).map(function (number) {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          backgroundColor: colors[props.status]\n        },\n        className: \"number\",\n        onClick: function onClick() {\n          return console.log(\"Num \", number);\n        },\n        children: number\n      }, number, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }, _this);\n    })\n  }, void 0, false);\n};\n\n_c2 = ButtonDisplay;\n\nvar numberStatus = function numberStatus(number, props) {\n  var candidatesAreWrong = utils.sum(candiateNums) > stars;\n\n  if (!availableNums.includes(number)) {\n    return 'used';\n  }\n\n  if (candiateNums.includes(number)) {\n    return candidatesAreWrong ? 'wrong' : 'candidate';\n  }\n\n  return 'available';\n};\n\nvar StarMatch = function StarMatch() {\n  _s();\n\n  var _useState = useState(utils.random(1, 9)),\n      stars = _useState[0],\n      setStars = _useState[1];\n\n  var _useState2 = useState([1, 2, 3, 4, 5]),\n      availableNums = _useState2[0],\n      setAvailableNums = _useState2[1];\n\n  var _useState3 = useState([2, 3]),\n      candiateNums = _useState3[0],\n      setCandidateNums = _useState3[1];\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col min-h-screen\",\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"help\",\n        children: \"Pick 1 or more numbers that sum to the number of stars\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"body\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left\",\n          children: /*#__PURE__*/_jsxDEV(StarsDisplay, {\n            count: stars\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 25\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"right\",\n          children: /*#__PURE__*/_jsxDEV(ButtonDisplay, {\n            status: numberStatus(number)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 25\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer\",\n        children: \"Time Remaining: 10\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, _this);\n}; // Color Theme\n\n\n_s(StarMatch, \"4pQ9o6MP0SCH35E1gMelYnk2tLI=\");\n\n_c3 = StarMatch;\nvar colors = {\n  available: 'lightgray',\n  used: 'lightgreen',\n  wrong: 'lightcoral',\n  candidate: 'deepskyblue'\n}; // Math science\n\nvar utils = {\n  // Sum an array\n  sum: function sum(arr) {\n    return arr.reduce(function (acc, curr) {\n      return acc + curr;\n    }, 0);\n  },\n  // create an array of numbers between min and max (edges included)\n  range: function range(min, max) {\n    return Array.from({\n      length: max - min + 1\n    }, function (_, i) {\n      return min + i;\n    });\n  },\n  // pick a random number between min and max (edges included)\n  random: function random(min, max) {\n    return min + Math.floor(Math.random() * (max - min + 1));\n  },\n  // Given an array of numbers and a max...\n  // Pick a random sum (< max) from the set of all available sums in arr\n  randomSumIn: function randomSumIn(arr, max) {\n    var sets = [[]];\n    var sums = [];\n\n    for (var i = 0; i < arr.length; i++) {\n      for (var j = 0, len = sets.length; j < len; j++) {\n        var candidateSet = sets[j].concat(arr[i]);\n        var candidateSum = utils.sum(candidateSet);\n\n        if (candidateSum <= max) {\n          sets.push(candidateSet);\n          sums.push(candidateSum);\n        }\n      }\n    }\n\n    return sums[utils.random(0, sums.length - 1)];\n  }\n};\nexport default StarMatch;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"StarsDisplay\");\n$RefreshReg$(_c2, \"ButtonDisplay\");\n$RefreshReg$(_c3, \"StarMatch\");","map":{"version":3,"sources":["C:/Users/jheinrich/Desktop/learningReact/pages/star-match.js"],"names":["NavBar","React","useState","useEffect","StarsDisplay","props","utils","range","count","map","starId","ButtonDisplay","number","backgroundColor","colors","status","console","log","numberStatus","candidatesAreWrong","sum","candiateNums","stars","availableNums","includes","StarMatch","random","setStars","setAvailableNums","setCandidateNums","available","used","wrong","candidate","arr","reduce","acc","curr","min","max","Array","from","length","_","i","Math","floor","randomSumIn","sets","sums","j","len","candidateSet","concat","candidateSum","push"],"mappings":"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","sourcesContent":["import NavBar from '../src/components/Navbar/Navbar';\r\nimport React, {useState, useEffect} from 'react';\r\n\r\nconst StarsDisplay = props => {\r\n    return (\r\n        <>\r\n            {utils.range(1, props.count).map(starId => \r\n                <div key={starId} className=\"star\"></div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nconst ButtonDisplay = (props) => {\r\n    return (\r\n        <>\r\n            {utils.range(1, 9).map(number => \r\n                <button key={number} style={{backgroundColor: colors[props.status]}} className=\"number\" onClick={() => console.log(\"Num \", number)}>{number}</button>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nconst numberStatus = (number, props) => {\r\n    const candidatesAreWrong = utils.sum(candiateNums) > stars;\r\n\r\n    if (!availableNums.includes(number)) {\r\n        return 'used';\r\n    }\r\n    if (candiateNums.includes(number)) {\r\n        return candidatesAreWrong ? 'wrong' : 'candidate';\r\n    }\r\n    return 'available';\r\n}\r\n\r\nconst StarMatch = () => {\r\n    const [stars, setStars] = useState(utils.random(1, 9));\r\n    const [availableNums, setAvailableNums] = useState([1, 2, 3, 4, 5]);\r\n    const [candiateNums, setCandidateNums] = useState([2, 3]);\r\n\r\n\r\n    return (\r\n        <div className=\"flex flex-col min-h-screen\">\r\n            <NavBar></NavBar>\r\n            <div className=\"game\">\r\n                <div className=\"help\">\r\n                Pick 1 or more numbers that sum to the number of stars\r\n                </div>\r\n                <div className=\"body\">\r\n                    <div className=\"left\">\r\n                        <StarsDisplay count={stars}/>\r\n                    </div>\r\n                    <div className=\"right\">\r\n                        <ButtonDisplay status={numberStatus(number)}/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"timer\">Time Remaining: 10</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n// Color Theme\r\nconst colors = {\r\n    available: 'lightgray',\r\n    used: 'lightgreen',\r\n    wrong: 'lightcoral',\r\n    candidate: 'deepskyblue',\r\n  };\r\n  \r\n  // Math science\r\n  const utils = {\r\n    // Sum an array\r\n    sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\r\n  \r\n    // create an array of numbers between min and max (edges included)\r\n    range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\r\n  \r\n    // pick a random number between min and max (edges included)\r\n    random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\r\n  \r\n    // Given an array of numbers and a max...\r\n    // Pick a random sum (< max) from the set of all available sums in arr\r\n    randomSumIn: (arr, max) => {\r\n      const sets = [[]];\r\n      const sums = [];\r\n      for (let i = 0; i < arr.length; i++) {\r\n        for (let j = 0, len = sets.length; j < len; j++) {\r\n          const candidateSet = sets[j].concat(arr[i]);\r\n          const candidateSum = utils.sum(candidateSet);\r\n          if (candidateSum <= max) {\r\n            sets.push(candidateSet);\r\n            sums.push(candidateSum);\r\n          }\r\n        }\r\n      }\r\n      return sums[utils.random(0, sums.length - 1)];\r\n    },\r\n  };\r\n\r\nexport default StarMatch;"]},"metadata":{},"sourceType":"module"}