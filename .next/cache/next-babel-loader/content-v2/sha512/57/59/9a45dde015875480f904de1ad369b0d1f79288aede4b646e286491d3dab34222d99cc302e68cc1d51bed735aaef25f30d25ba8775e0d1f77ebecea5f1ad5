{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction CryptoRenderProps(props) {\n  const {\n    0: cryptoData,\n    1: setCryptoData\n  } = useState({\n    btcData: [],\n    ethData: [],\n    bchData: [],\n    isLoading: false\n  });\n  const {\n    0: cryptoInfo,\n    1: setCryptoInfo\n  } = useState([]);\n\n  const fetchData = () => {\n    const btcURL = \"https://api.coinbase.com/v2/prices/BTC-USD/buy\";\n    const ethURL = \"https://api.coinbase.com/v2/prices/ETH-USD/buy\";\n    const bchURL = \"https://api.coinbase.com/v2/prices/BCH-USD/buy\";\n    Promise.all([axios.get(btcURL), axios.get(ethURL), axios.get(bchURL)]).then(results => {\n      setCryptoData({\n        btcData: results[0].data.data,\n        ethData: results[1].data.data,\n        bchData: results[2].data.data,\n        isLoading: false\n      });\n      setCryptoInfo([results[0].data.data, results[1].data.data, results[2].data.data]);\n    }).catch(err => {\n      console.log(err);\n      setIsLoading(false);\n    });\n  };\n\n  useEffect(() => {\n    setCryptoData({\n      isLoading: true\n    });\n    fetchData();\n  }, []);\n  var keys = Object.keys(cryptoData);\n  var rows = [];\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    rows.push(cryptoData[key]);\n  }\n\n  return props.children({\n    rows: rows,\n    isLoading: isLoading\n  });\n}\n\nexport default CryptoRenderProps;","map":{"version":3,"sources":["C:/Users/jheinrich/Desktop/learningReact/src/components/CryptoCard/CryptoRenderProps.js"],"names":["useState","useEffect","axios","CryptoRenderProps","props","cryptoData","setCryptoData","btcData","ethData","bchData","isLoading","cryptoInfo","setCryptoInfo","fetchData","btcURL","ethURL","bchURL","Promise","all","get","then","results","data","catch","err","console","log","setIsLoading","keys","Object","rows","i","length","key","push","children"],"mappings":"AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAC9B,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAA8BN,QAAQ,CAAC;AACzCO,IAAAA,OAAO,EAAE,EADgC;AAEzCC,IAAAA,OAAO,EAAE,EAFgC;AAGzCC,IAAAA,OAAO,EAAE,EAHgC;AAIzCC,IAAAA,SAAS,EAAE;AAJ8B,GAAD,CAA5C;AAMA,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAA8BZ,QAAQ,CAAC,EAAD,CAA5C;;AAEA,QAAMa,SAAS,GAAG,MAAM;AACpB,UAAMC,MAAM,GAAG,gDAAf;AACA,UAAMC,MAAM,GAAG,gDAAf;AACA,UAAMC,MAAM,GAAG,gDAAf;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY,CACRhB,KAAK,CAACiB,GAAN,CAAUL,MAAV,CADQ,EAERZ,KAAK,CAACiB,GAAN,CAAUJ,MAAV,CAFQ,EAGRb,KAAK,CAACiB,GAAN,CAAUH,MAAV,CAHQ,CAAZ,EAIGI,IAJH,CAISC,OAAD,IAAa;AACjBf,MAAAA,aAAa,CAAC;AACVC,QAAAA,OAAO,EAAEc,OAAO,CAAC,CAAD,CAAP,CAAWC,IAAX,CAAgBA,IADf;AAEVd,QAAAA,OAAO,EAAEa,OAAO,CAAC,CAAD,CAAP,CAAWC,IAAX,CAAgBA,IAFf;AAGVb,QAAAA,OAAO,EAAEY,OAAO,CAAC,CAAD,CAAP,CAAWC,IAAX,CAAgBA,IAHf;AAIVZ,QAAAA,SAAS,EAAE;AAJD,OAAD,CAAb;AAMAE,MAAAA,aAAa,CAAC,CAACS,OAAO,CAAC,CAAD,CAAP,CAAWC,IAAX,CAAgBA,IAAjB,EAAuBD,OAAO,CAAC,CAAD,CAAP,CAAWC,IAAX,CAAgBA,IAAvC,EAA6CD,OAAO,CAAC,CAAD,CAAP,CAAWC,IAAX,CAAgBA,IAA7D,CAAD,CAAb;AACH,KAZD,EAaCC,KAbD,CAaQC,GAAD,IAAS;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAG,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KAhBD;AAiBH,GAtBD;;AAwBA1B,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,aAAa,CAAC;AACVI,MAAAA,SAAS,EAAE;AADD,KAAD,CAAb;AAGAG,IAAAA,SAAS;AACZ,GALQ,EAKN,EALM,CAAT;AAOA,MAAIe,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYvB,UAAZ,CAAX;AACA,MAAIyB,IAAI,GAAG,EAAX;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACI,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,QAAIE,GAAG,GAAIL,IAAI,CAACG,CAAD,CAAf;AACAD,IAAAA,IAAI,CAACI,IAAL,CAAU7B,UAAU,CAAC4B,GAAD,CAApB;AACH;;AAED,SAAO7B,KAAK,CAAC+B,QAAN,CAAe;AAClBL,IAAAA,IAAI,EAAEA,IADY;AAElBpB,IAAAA,SAAS,EAAEA;AAFO,GAAf,CAAP;AAIH;;AAED,eAAeP,iBAAf","sourcesContent":["import {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction CryptoRenderProps(props) {\r\n    const [cryptoData, setCryptoData] = useState({\r\n        btcData: [],\r\n        ethData: [],\r\n        bchData: [],\r\n        isLoading: false,\r\n    });\r\n    const [cryptoInfo, setCryptoInfo] = useState([]);\r\n\r\n    const fetchData = () => {\r\n        const btcURL = \"https://api.coinbase.com/v2/prices/BTC-USD/buy\";\r\n        const ethURL = \"https://api.coinbase.com/v2/prices/ETH-USD/buy\";\r\n        const bchURL = \"https://api.coinbase.com/v2/prices/BCH-USD/buy\";\r\n\r\n        Promise.all([\r\n            axios.get(btcURL),\r\n            axios.get(ethURL),\r\n            axios.get(bchURL)\r\n        ]).then((results) => {\r\n            setCryptoData({\r\n                btcData: results[0].data.data,\r\n                ethData: results[1].data.data,\r\n                bchData: results[2].data.data,\r\n                isLoading: false,\r\n            });\r\n            setCryptoInfo([results[0].data.data, results[1].data.data, results[2].data.data]);\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n            setIsLoading(false);\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        setCryptoData({\r\n            isLoading: true\r\n        })\r\n        fetchData();\r\n    }, [])\r\n\r\n    var keys = Object.keys(cryptoData);\r\n    var rows = [];\r\n\r\n    for (var i = 0; i < keys.length; i++) { \r\n        var key = (keys[i]);\r\n        rows.push(cryptoData[key]);\r\n    }\r\n\r\n    return props.children({\r\n        rows: rows,\r\n        isLoading: isLoading,\r\n    });\r\n}\r\n\r\nexport default CryptoRenderProps;"]},"metadata":{},"sourceType":"module"}