{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\jheinrich\\\\Desktop\\\\learningReact\\\\pages\\\\star-match.js\";\nimport NavBar from '../src/components/Navbar/Navbar';\nimport React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst StarsDisplay = props => /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: utils.range(1, props.count).map(starId => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"star\"\n  }, starId, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 13\n  }, this))\n}, void 0, false);\n\nconst ButtonDisplay = props => {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    style: {\n      backgroundColor: colors[props.status]\n    },\n    className: \"number\",\n    onClick: () => props.onClick(props.number, props.status),\n    children: props.number\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this);\n};\n\nconst PlayAgain = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-done\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      children: \"Play Again\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n\nconst StarMatch = () => {\n  //hooks into state\n  //hooks into sideeffects\n  //computations based on state\n  const {\n    0: stars,\n    1: setStars\n  } = useState(utils.random(1, 9));\n  const {\n    0: availableNums,\n    1: setAvailableNums\n  } = useState(utils.range(1, 9));\n  const {\n    0: candidateNums,\n    1: setCandidateNums\n  } = useState([]);\n  const candidatesAreWrong = utils.sum(candidateNums) > stars;\n  const gameisDone = availableNums.length === 0;\n\n  const numberStatus = number => {\n    if (!availableNums.includes(number)) {\n      return 'used';\n    }\n\n    if (candidateNums.includes(number)) {\n      return candidatesAreWrong ? 'wrong' : 'candidate';\n    }\n\n    return 'available';\n  };\n\n  const onNumberClick = (number, currentStatus) => {\n    if (currentStatus === 'used') {\n      return;\n    }\n\n    const newCandidateNums = currentStatus === 'available' ? candidateNums.concat(number) : candidateNums.filter(cn => cn !== number);\n\n    if (utils.sum(newCandidateNums) !== stars) {\n      setCandidateNums(newCandidateNums);\n    } else {\n      const newAvailableNums = availableNums.filter(n => !newCandidateNums.includes(n));\n      setStars(utils.randomSumIn(newAvailableNums, 9));\n      setAvailableNums(newAvailableNums);\n      setCandidateNums([]);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col min-h-screen\",\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"help\",\n        children: \"Pick 1 or more numbers that sum to the number of stars\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"body\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left\",\n          children: gameisDone ? /*#__PURE__*/_jsxDEV(PlayAgain, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(StarsDisplay, {\n            count: stars\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"right\",\n          children: utils.range(1, 9).map(number => /*#__PURE__*/_jsxDEV(ButtonDisplay, {\n            number: number,\n            status: numberStatus(number),\n            onClick: onNumberClick\n          }, number, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer\",\n        children: \"Time Remaining: 10\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n}; // Color Theme\n\n\nconst colors = {\n  available: 'lightgray',\n  used: 'lightgreen',\n  wrong: 'lightcoral',\n  candidate: 'deepskyblue'\n}; // Math science\n\nconst utils = {\n  // Sum an array\n  sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\n  // create an array of numbers between min and max (edges included)\n  range: (min, max) => Array.from({\n    length: max - min + 1\n  }, (_, i) => min + i),\n  // pick a random number between min and max (edges included)\n  random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\n  // Given an array of numbers and a max...\n  // Pick a random sum (< max) from the set of all available sums in arr\n  randomSumIn: (arr, max) => {\n    const sets = [[]];\n    const sums = [];\n\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0, len = sets.length; j < len; j++) {\n        const candidateSet = sets[j].concat(arr[i]);\n        const candidateSum = utils.sum(candidateSet);\n\n        if (candidateSum <= max) {\n          sets.push(candidateSet);\n          sums.push(candidateSum);\n        }\n      }\n    }\n\n    return sums[utils.random(0, sums.length - 1)];\n  }\n};\nexport default StarMatch;","map":{"version":3,"sources":["C:/Users/jheinrich/Desktop/learningReact/pages/star-match.js"],"names":["NavBar","React","useState","useEffect","ReactDOM","StarsDisplay","props","utils","range","count","map","starId","ButtonDisplay","backgroundColor","colors","status","onClick","number","PlayAgain","StarMatch","stars","setStars","random","availableNums","setAvailableNums","candidateNums","setCandidateNums","candidatesAreWrong","sum","gameisDone","length","numberStatus","includes","onNumberClick","currentStatus","newCandidateNums","concat","filter","cn","newAvailableNums","n","randomSumIn","available","used","wrong","candidate","arr","reduce","acc","curr","min","max","Array","from","_","i","Math","floor","sets","sums","j","len","candidateSet","candidateSum","push"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,iCAAnB;AACA,OAAOC,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,QAAP,MAAqB,WAArB;;AAEA,MAAMC,YAAY,GAAGC,KAAK,iBACtB;AAAA,YACKC,KAAK,CAACC,KAAN,CAAY,CAAZ,EAAeF,KAAK,CAACG,KAArB,EAA4BC,GAA5B,CAAgCC,MAAM,iBACnC;AAAkB,IAAA,SAAS,EAAC;AAA5B,KAAUA,MAAV;AAAA;AAAA;AAAA;AAAA,UADH;AADL,iBADJ;;AAQA,MAAMC,aAAa,GAAGN,KAAK,IAAI;AAC3B,sBACI;AACA,IAAA,KAAK,EAAE;AAACO,MAAAA,eAAe,EAAEC,MAAM,CAACR,KAAK,CAACS,MAAP;AAAxB,KADP;AAEA,IAAA,SAAS,EAAC,QAFV;AAGA,IAAA,OAAO,EAAE,MAAMT,KAAK,CAACU,OAAN,CAAcV,KAAK,CAACW,MAApB,EAA4BX,KAAK,CAACS,MAAlC,CAHf;AAAA,cAKKT,KAAK,CAACW;AALX;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CAVD;;AAYA,MAAMC,SAAS,GAAIZ,KAAD,IAAW;AACzB,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,2BACI;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAND;;AAQA,MAAMa,SAAS,GAAG,MAAM;AACpB;AACA;AACA;AACA,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBnB,QAAQ,CAACK,KAAK,CAACe,MAAN,CAAa,CAAb,EAAgB,CAAhB,CAAD,CAAlC;AACA,QAAM;AAAA,OAACC,aAAD;AAAA,OAAgBC;AAAhB,MAAoCtB,QAAQ,CAACK,KAAK,CAACC,KAAN,CAAY,CAAZ,EAAe,CAAf,CAAD,CAAlD;AACA,QAAM;AAAA,OAACiB,aAAD;AAAA,OAAgBC;AAAhB,MAAoCxB,QAAQ,CAAC,EAAD,CAAlD;AAEA,QAAMyB,kBAAkB,GAAGpB,KAAK,CAACqB,GAAN,CAAUH,aAAV,IAA2BL,KAAtD;AACA,QAAMS,UAAU,GAAGN,aAAa,CAACO,MAAd,KAAyB,CAA5C;;AAEA,QAAMC,YAAY,GAAId,MAAD,IAAY;AAE7B,QAAI,CAACM,aAAa,CAACS,QAAd,CAAuBf,MAAvB,CAAL,EAAqC;AACjC,aAAO,MAAP;AACH;;AACD,QAAIQ,aAAa,CAACO,QAAd,CAAuBf,MAAvB,CAAJ,EAAoC;AAChC,aAAOU,kBAAkB,GAAG,OAAH,GAAa,WAAtC;AACH;;AACD,WAAO,WAAP;AACH,GATD;;AAWA,QAAMM,aAAa,GAAG,CAAChB,MAAD,EAASiB,aAAT,KAA2B;AAE7C,QAAIA,aAAa,KAAK,MAAtB,EAA8B;AAC5B;AACD;;AAED,UAAMC,gBAAgB,GACpBD,aAAa,KAAK,WAAlB,GACIT,aAAa,CAACW,MAAd,CAAqBnB,MAArB,CADJ,GAEIQ,aAAa,CAACY,MAAd,CAAqBC,EAAE,IAAIA,EAAE,KAAKrB,MAAlC,CAHN;;AAKA,QAAIV,KAAK,CAACqB,GAAN,CAAUO,gBAAV,MAAgCf,KAApC,EAA2C;AACzCM,MAAAA,gBAAgB,CAACS,gBAAD,CAAhB;AACD,KAFD,MAEO;AACL,YAAMI,gBAAgB,GAAGhB,aAAa,CAACc,MAAd,CACvBG,CAAC,IAAI,CAACL,gBAAgB,CAACH,QAAjB,CAA0BQ,CAA1B,CADiB,CAAzB;AAGAnB,MAAAA,QAAQ,CAACd,KAAK,CAACkC,WAAN,CAAkBF,gBAAlB,EAAoC,CAApC,CAAD,CAAR;AACAf,MAAAA,gBAAgB,CAACe,gBAAD,CAAhB;AACAb,MAAAA,gBAAgB,CAAC,EAAD,CAAhB;AACD;AACF,GArBH;;AAuBA,sBACI;AAAK,IAAA,SAAS,EAAC,4BAAf;AAAA,4BACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAII;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC,MAAf;AAAA,oBACKG,UAAU,gBACP,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,kBADO,gBAGP,QAAC,YAAD;AAAc,YAAA,KAAK,EAAET;AAArB;AAAA;AAAA;AAAA;AAAA;AAJR;AAAA;AAAA;AAAA;AAAA,gBADJ,eAQI;AAAK,UAAA,SAAS,EAAC,OAAf;AAAA,oBACKb,KAAK,CAACC,KAAN,CAAY,CAAZ,EAAe,CAAf,EAAkBE,GAAlB,CAAsBO,MAAM,iBACzB,QAAC,aAAD;AAEI,YAAA,MAAM,EAAEA,MAFZ;AAGI,YAAA,MAAM,EAAEc,YAAY,CAACd,MAAD,CAHxB;AAII,YAAA,OAAO,EAAEgB;AAJb,aACShB,MADT;AAAA;AAAA;AAAA;AAAA,kBADH;AADL;AAAA;AAAA;AAAA;AAAA,gBARJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,eAuBI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAvBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA8BH,CA3ED,C,CA8EA;;;AACA,MAAMH,MAAM,GAAG;AACX4B,EAAAA,SAAS,EAAE,WADA;AAEXC,EAAAA,IAAI,EAAE,YAFK;AAGXC,EAAAA,KAAK,EAAE,YAHI;AAIXC,EAAAA,SAAS,EAAE;AAJA,CAAf,C,CAOE;;AACA,MAAMtC,KAAK,GAAG;AACZ;AACAqB,EAAAA,GAAG,EAAEkB,GAAG,IAAIA,GAAG,CAACC,MAAJ,CAAW,CAACC,GAAD,EAAMC,IAAN,KAAeD,GAAG,GAAGC,IAAhC,EAAsC,CAAtC,CAFA;AAIZ;AACAzC,EAAAA,KAAK,EAAE,CAAC0C,GAAD,EAAMC,GAAN,KAAcC,KAAK,CAACC,IAAN,CAAW;AAAEvB,IAAAA,MAAM,EAAEqB,GAAG,GAAGD,GAAN,GAAY;AAAtB,GAAX,EAAsC,CAACI,CAAD,EAAIC,CAAJ,KAAUL,GAAG,GAAGK,CAAtD,CALT;AAOZ;AACAjC,EAAAA,MAAM,EAAE,CAAC4B,GAAD,EAAMC,GAAN,KAAcD,GAAG,GAAGM,IAAI,CAACC,KAAL,CAAWD,IAAI,CAAClC,MAAL,MAAiB6B,GAAG,GAAGD,GAAN,GAAY,CAA7B,CAAX,CARhB;AAUZ;AACA;AACAT,EAAAA,WAAW,EAAE,CAACK,GAAD,EAAMK,GAAN,KAAc;AACzB,UAAMO,IAAI,GAAG,CAAC,EAAD,CAAb;AACA,UAAMC,IAAI,GAAG,EAAb;;AACA,SAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,GAAG,CAAChB,MAAxB,EAAgCyB,CAAC,EAAjC,EAAqC;AACnC,WAAK,IAAIK,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGH,IAAI,CAAC5B,MAA3B,EAAmC8B,CAAC,GAAGC,GAAvC,EAA4CD,CAAC,EAA7C,EAAiD;AAC/C,cAAME,YAAY,GAAGJ,IAAI,CAACE,CAAD,CAAJ,CAAQxB,MAAR,CAAeU,GAAG,CAACS,CAAD,CAAlB,CAArB;AACA,cAAMQ,YAAY,GAAGxD,KAAK,CAACqB,GAAN,CAAUkC,YAAV,CAArB;;AACA,YAAIC,YAAY,IAAIZ,GAApB,EAAyB;AACvBO,UAAAA,IAAI,CAACM,IAAL,CAAUF,YAAV;AACAH,UAAAA,IAAI,CAACK,IAAL,CAAUD,YAAV;AACD;AACF;AACF;;AACD,WAAOJ,IAAI,CAACpD,KAAK,CAACe,MAAN,CAAa,CAAb,EAAgBqC,IAAI,CAAC7B,MAAL,GAAc,CAA9B,CAAD,CAAX;AACD;AA1BW,CAAd;AA8BF,eAAeX,SAAf","sourcesContent":["import NavBar from '../src/components/Navbar/Navbar';\r\nimport React, {useState, useEffect} from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nconst StarsDisplay = props => (\r\n    <>\r\n        {utils.range(1, props.count).map(starId => \r\n            <div key={starId} className=\"star\"></div>\r\n        )}\r\n    </>\r\n);\r\n\r\nconst ButtonDisplay = props => {\r\n    return (\r\n        <button \r\n        style={{backgroundColor: colors[props.status]}} \r\n        className=\"number\" \r\n        onClick={() => props.onClick(props.number, props.status)} \r\n        >\r\n            {props.number}\r\n        </button>\r\n    )\r\n};\r\n\r\nconst PlayAgain = (props) => {\r\n    return (\r\n        <div className=\"game-done\">\r\n            <button type=\"button\">Play Again</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst StarMatch = () => {\r\n    //hooks into state\r\n    //hooks into sideeffects\r\n    //computations based on state\r\n    const [stars, setStars] = useState(utils.random(1, 9));\r\n    const [availableNums, setAvailableNums] = useState(utils.range(1, 9));\r\n    const [candidateNums, setCandidateNums] = useState([]);\r\n\r\n    const candidatesAreWrong = utils.sum(candidateNums) > stars;\r\n    const gameisDone = availableNums.length === 0;\r\n\r\n    const numberStatus = (number) => {\r\n\r\n        if (!availableNums.includes(number)) {\r\n            return 'used';\r\n        }\r\n        if (candidateNums.includes(number)) {\r\n            return candidatesAreWrong ? 'wrong' : 'candidate';\r\n        }\r\n        return 'available';\r\n    }\r\n    \r\n    const onNumberClick = (number, currentStatus) => {\r\n\r\n        if (currentStatus === 'used') {\r\n          return;\r\n        }\r\n    \r\n        const newCandidateNums =\r\n          currentStatus === 'available'\r\n            ? candidateNums.concat(number)\r\n            : candidateNums.filter(cn => cn !== number);\r\n    \r\n        if (utils.sum(newCandidateNums) !== stars) {\r\n          setCandidateNums(newCandidateNums);\r\n        } else {\r\n          const newAvailableNums = availableNums.filter(\r\n            n => !newCandidateNums.includes(n)\r\n          );\r\n          setStars(utils.randomSumIn(newAvailableNums, 9));\r\n          setAvailableNums(newAvailableNums);\r\n          setCandidateNums([]);\r\n        }\r\n      };\r\n\r\n    return (\r\n        <div className=\"flex flex-col min-h-screen\">\r\n            <NavBar></NavBar>\r\n            <div className=\"game\">\r\n                <div className=\"help\">\r\n                Pick 1 or more numbers that sum to the number of stars\r\n                </div>\r\n                <div className=\"body\">\r\n                    <div className=\"left\">\r\n                        {gameisDone ? (\r\n                            <PlayAgain/>\r\n                            ) : (\r\n                            <StarsDisplay count={stars} />\r\n                        )}\r\n                    </div>\r\n                    <div className=\"right\">\r\n                        {utils.range(1, 9).map(number => \r\n                            <ButtonDisplay \r\n                                key={number} \r\n                                number={number} \r\n                                status={numberStatus(number)}\r\n                                onClick={onNumberClick}\r\n                            />\r\n                        )}\r\n                    </div>\r\n                </div>\r\n                <div className=\"timer\">Time Remaining: 10</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n// Color Theme\r\nconst colors = {\r\n    available: 'lightgray',\r\n    used: 'lightgreen',\r\n    wrong: 'lightcoral',\r\n    candidate: 'deepskyblue',\r\n  };\r\n  \r\n  // Math science\r\n  const utils = {\r\n    // Sum an array\r\n    sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\r\n  \r\n    // create an array of numbers between min and max (edges included)\r\n    range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\r\n  \r\n    // pick a random number between min and max (edges included)\r\n    random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\r\n  \r\n    // Given an array of numbers and a max...\r\n    // Pick a random sum (< max) from the set of all available sums in arr\r\n    randomSumIn: (arr, max) => {\r\n      const sets = [[]];\r\n      const sums = [];\r\n      for (let i = 0; i < arr.length; i++) {\r\n        for (let j = 0, len = sets.length; j < len; j++) {\r\n          const candidateSet = sets[j].concat(arr[i]);\r\n          const candidateSum = utils.sum(candidateSet);\r\n          if (candidateSum <= max) {\r\n            sets.push(candidateSet);\r\n            sums.push(candidateSum);\r\n          }\r\n        }\r\n      }\r\n      return sums[utils.random(0, sums.length - 1)];\r\n    },\r\n  };\r\n\r\n  \r\nexport default StarMatch;"]},"metadata":{},"sourceType":"module"}