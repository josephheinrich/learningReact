{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction CryptoRenderProps(props) {\n  _s();\n\n  var _useState = useState({\n    btcData: [],\n    ethData: [],\n    bchData: []\n  }),\n      cryptoData = _useState[0],\n      setCryptoData = _useState[1];\n\n  var fetchData = function fetchData() {\n    var btcURL = \"https://api.coinbase.com/v2/prices/BTC-USD/buy\";\n    var ethURL = \"https://api.coinbase.com/v2/prices/ETH-USD/buy\";\n    var bchURL = \"https://api.coinbase.com/v2/prices/BCH-USD/buy\";\n    Promise.all([axios.get(btcURL), axios.get(ethURL), axios.get(bchURL)]).then(function (results) {\n      setCryptoData({\n        btcData: results[0].data.data,\n        ethData: results[1].data.data,\n        bchData: results[2].data.data\n      });\n    })[\"catch\"](function (err) {\n      console.log(err);\n    });\n  };\n\n  useEffect(function () {\n    fetchData();\n  }, []);\n  var keys = Object.keys(cryptoData);\n  var rows = [];\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    rows.push(cryptoData[key]);\n  }\n\n  return props.children({\n    rows: rows\n  });\n}\n\n_s(CryptoRenderProps, \"n/pTSNVWlU1M1ODMuGHFJ/YRMR4=\");\n\n_c = CryptoRenderProps;\nexport default CryptoRenderProps;\n\nvar _c;\n\n$RefreshReg$(_c, \"CryptoRenderProps\");","map":{"version":3,"sources":["C:/Users/jheinrich/Desktop/learningReact/src/components/CryptoCard/CryptoRenderProps.js"],"names":["useState","useEffect","axios","CryptoRenderProps","props","btcData","ethData","bchData","cryptoData","setCryptoData","fetchData","btcURL","ethURL","bchURL","Promise","all","get","then","results","data","err","console","log","keys","Object","rows","i","length","key","push","children"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAAA;;AAAA,kBACMJ,QAAQ,CAAC;AACzCK,IAAAA,OAAO,EAAE,EADgC;AAEzCC,IAAAA,OAAO,EAAE,EAFgC;AAGzCC,IAAAA,OAAO,EAAE;AAHgC,GAAD,CADd;AAAA,MACvBC,UADuB;AAAA,MACXC,aADW;;AAO9B,MAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AACpB,QAAMC,MAAM,GAAG,gDAAf;AACA,QAAMC,MAAM,GAAG,gDAAf;AACA,QAAMC,MAAM,GAAG,gDAAf;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY,CACRb,KAAK,CAACc,GAAN,CAAUL,MAAV,CADQ,EAERT,KAAK,CAACc,GAAN,CAAUJ,MAAV,CAFQ,EAGRV,KAAK,CAACc,GAAN,CAAUH,MAAV,CAHQ,CAAZ,EAIGI,IAJH,CAIQ,UAACC,OAAD,EAAa;AACjBT,MAAAA,aAAa,CAAC;AACdJ,QAAAA,OAAO,EAAEa,OAAO,CAAC,CAAD,CAAP,CAAWC,IAAX,CAAgBA,IADX;AAEdb,QAAAA,OAAO,EAAEY,OAAO,CAAC,CAAD,CAAP,CAAWC,IAAX,CAAgBA,IAFX;AAGdZ,QAAAA,OAAO,EAAEW,OAAO,CAAC,CAAD,CAAP,CAAWC,IAAX,CAAgBA;AAHX,OAAD,CAAb;AAKH,KAVD,WAWO,UAACC,GAAD,EAAS;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH,KAbD;AAcH,GAnBD;;AAqBAnB,EAAAA,SAAS,CAAC,YAAM;AACZS,IAAAA,SAAS;AACZ,GAFQ,EAEN,EAFM,CAAT;AAIA,MAAIa,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYf,UAAZ,CAAX;AACA,MAAIiB,IAAI,GAAG,EAAX;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACI,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,QAAIE,GAAG,GAAIL,IAAI,CAACG,CAAD,CAAf;AACAD,IAAAA,IAAI,CAACI,IAAL,CAAUrB,UAAU,CAACoB,GAAD,CAApB;AACH;;AAED,SAAOxB,KAAK,CAAC0B,QAAN,CAAe;AAClBL,IAAAA,IAAI,EAAEA;AADY,GAAf,CAAP;AAGH;;GA3CQtB,iB;;KAAAA,iB;AA6CT,eAAeA,iBAAf","sourcesContent":["import {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction CryptoRenderProps(props) {\r\n    const [cryptoData, setCryptoData] = useState({\r\n        btcData: [],\r\n        ethData: [],\r\n        bchData: []\r\n    });\r\n\r\n    const fetchData = () => {\r\n        const btcURL = \"https://api.coinbase.com/v2/prices/BTC-USD/buy\";\r\n        const ethURL = \"https://api.coinbase.com/v2/prices/ETH-USD/buy\";\r\n        const bchURL = \"https://api.coinbase.com/v2/prices/BCH-USD/buy\";\r\n\r\n        Promise.all([\r\n            axios.get(btcURL),\r\n            axios.get(ethURL),\r\n            axios.get(bchURL)\r\n        ]).then((results) => {\r\n            setCryptoData({\r\n            btcData: results[0].data.data,\r\n            ethData: results[1].data.data,\r\n            bchData: results[2].data.data\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, [])\r\n\r\n    var keys = Object.keys(cryptoData);\r\n    var rows = [];\r\n\r\n    for (var i = 0; i < keys.length; i++) { \r\n        var key = (keys[i]);\r\n        rows.push(cryptoData[key]);\r\n    }\r\n\r\n    return props.children({\r\n        rows: rows\r\n    });\r\n}\r\n\r\nexport default CryptoRenderProps;"]},"metadata":{},"sourceType":"module"}