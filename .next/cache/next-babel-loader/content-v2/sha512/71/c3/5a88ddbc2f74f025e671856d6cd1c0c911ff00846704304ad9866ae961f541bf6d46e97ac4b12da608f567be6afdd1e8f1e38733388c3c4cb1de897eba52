{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\jheinrich\\\\Desktop\\\\learningReact\\\\src\\\\components\\\\CryptoCard\\\\CryptoCard.js\";\nimport React, { useState, useEffect } from 'react'; //import CryptoRenderProps from './CryptoRenderProps';\n\nfunction CryptoRenderProps(props) {\n  return props.children();\n}\n\nconst CryptoCard = () => {\n  const {\n    0: cryptoData,\n    1: setCryptoData\n  } = useState({\n    btcData: [],\n    ethData: [],\n    bchData: []\n  });\n\n  const fetchData = () => {\n    const btcURL = \"https://api.coinbase.com/v2/prices/BTC-USD/buy\";\n    const ethURL = \"https://api.coinbase.com/v2/prices/ETH-USD/buy\";\n    const bchURL = \"https://api.coinbase.com/v2/prices/BCH-USD/buy\";\n    Promise.all([axios.get(btcURL), axios.get(ethURL), axios.get(bchURL)]).then(results => {\n      setCryptoData({\n        btcData: results[0].data.data,\n        ethData: results[1].data.data,\n        bchData: results[2].data.data\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  var keys = Object.keys(cryptoData);\n  var rows = [];\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    rows.push(cryptoData[key]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(CryptoRenderProps, {\n    children: () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-1 overflow-y-auto p-5\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-wrap justify-center sm:flex\",\n          children: rows.map(({\n            base,\n            currency,\n            amount\n          }, i) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"m-8 w-40 sm:w-44 md:w-48 justify-items-center\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"rounded shadow-md overflow-hidden\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      alt: \"\",\n                      className: \"bg-green-900 h-40 object-cover\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 63,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"bg-white m-2\",\n                      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"text-xl block font-light\",\n                        children: base\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 65,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"text-lg font-bold text-green-900\",\n                        children: [amount, \"\\xB0\"]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 66,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"ml-1 text-gray-700\",\n                        children: currency\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 66,\n                        columnNumber: 128\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 64,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 62,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 61,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 41\n              }, this)\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 37\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n\nexport default CryptoCard;","map":{"version":3,"sources":["C:/Users/jheinrich/Desktop/learningReact/src/components/CryptoCard/CryptoCard.js"],"names":["React","useState","useEffect","CryptoRenderProps","props","children","CryptoCard","cryptoData","setCryptoData","btcData","ethData","bchData","fetchData","btcURL","ethURL","bchURL","Promise","all","axios","get","then","results","data","catch","err","console","log","keys","Object","rows","i","length","key","push","map","base","currency","amount"],"mappings":"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","sourcesContent":["\r\nimport React, {useState, useEffect} from 'react';\r\n//import CryptoRenderProps from './CryptoRenderProps';\r\n\r\nfunction CryptoRenderProps(props) {\r\n  return props.children();\r\n}\r\n\r\n\r\nconst CryptoCard = () => {\r\n\r\n    const [cryptoData, setCryptoData] = useState({\r\n        btcData: [],\r\n        ethData: [],\r\n        bchData: []\r\n    });\r\n\r\n    const fetchData = () => {\r\n        const btcURL = \"https://api.coinbase.com/v2/prices/BTC-USD/buy\";\r\n        const ethURL = \"https://api.coinbase.com/v2/prices/ETH-USD/buy\";\r\n        const bchURL = \"https://api.coinbase.com/v2/prices/BCH-USD/buy\";\r\n\r\n        Promise.all([\r\n            axios.get(btcURL),\r\n            axios.get(ethURL),\r\n            axios.get(bchURL)\r\n        ]).then((results) => {\r\n            setCryptoData({\r\n            btcData: results[0].data.data,\r\n            ethData: results[1].data.data,\r\n            bchData: results[2].data.data\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, [])\r\n\r\n    var keys = Object.keys(cryptoData);\r\n    var rows = [];\r\n\r\n    for (var i = 0; i < keys.length; i++) { \r\n        var key = (keys[i]);\r\n        rows.push(cryptoData[key]);\r\n    }\r\n\r\n    return (\r\n        <CryptoRenderProps>\r\n            {() => {\r\n                return (     \r\n                    <div className=\"flex-1 overflow-y-auto p-5\">\r\n                        <div className=\"flex flex-wrap justify-center sm:flex\">\r\n                            {rows.map(({base, currency, amount}, i) => {\r\n                                return (\r\n                                    <div key={i}>\r\n                                        <div className=\"m-8 w-40 sm:w-44 md:w-48 justify-items-center\">\r\n                                            <div className=\"rounded shadow-md overflow-hidden\">\r\n                                                <div>\r\n                                                    <div alt=\"\" className=\"bg-green-900 h-40 object-cover\"/>\r\n                                                    <div className=\"bg-white m-2\">\r\n                                                        <span className=\"text-xl block font-light\">{base}</span>\r\n                                                        <span className=\"text-lg font-bold text-green-900\">{amount}&deg;</span><span className=\"ml-1 text-gray-700\">{currency}</span>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }}\r\n        </CryptoRenderProps>\r\n    )\r\n}\r\n\r\nexport default CryptoCard;"]},"metadata":{},"sourceType":"module"}