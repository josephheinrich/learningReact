{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\jheinrich\\\\Desktop\\\\learningReact\\\\pages\\\\star-match.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport NavBar from '../src/components/Navbar/Navbar';\nimport React, { useState, useEffect } from 'react';\n\nvar StarsDisplay = function StarsDisplay(props) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: utils.range(1, props.count).map(function (starId) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"star\"\n      }, starId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 17\n      }, _this);\n    })\n  }, void 0, false);\n};\n\n_c = StarsDisplay;\n\nvar ButtonDisplay = function ButtonDisplay(props) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    style: {\n      backgroundColor: colors[props.status]\n    },\n    className: \"number\",\n    onClick: props.onClick(props.number, props.status),\n    children: props.number\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }, _this);\n};\n\n_c2 = ButtonDisplay;\n\nvar StarMatch = function StarMatch() {\n  _s();\n\n  var _useState = useState(utils.random(1, 9)),\n      stars = _useState[0],\n      setStars = _useState[1];\n\n  var _useState2 = useState(utils.range(1, 9)),\n      availableNums = _useState2[0],\n      setAvailableNums = _useState2[1];\n\n  var _useState3 = useState([]),\n      candidateNums = _useState3[0],\n      setCandidateNums = _useState3[1];\n\n  var candidatesAreWrong = utils.sum(candidateNums) > stars;\n\n  var numberStatus = function numberStatus(number) {\n    if (!availableNums.includes(number)) {\n      return 'used';\n    }\n\n    if (candidateNums.includes(number)) {\n      return candidatesAreWrong ? 'wrong' : 'candidate';\n    }\n\n    return 'available';\n  };\n\n  var onNumberClick = function onNumberClick(number, currentStatus) {\n    //currentStatus => newStatus\n    if (currentStatus == 'used') {\n      return;\n    }\n\n    var newCandidateNums = candidateNums.concat(number);\n\n    if (utils.sum(newCandidateNums) !== stars) {\n      setCandidateNums(newCandidateNums);\n    } //else {\n    //     const newAvailableNums = availableNums.filter(\n    //         n => !newCandidateNums.includes(n)\n    //     )\n    //     //redraw stars from what's available\n    //     setStars(utils.randomSumIn(newAvailableNums, 9))\n    //     setAvailableNums(newAvailableNums);\n    //     setCandidateNums([]);\n    // }\n\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col min-h-screen\",\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"help\",\n        children: \"Pick 1 or more numbers that sum to the number of stars\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"body\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left\",\n          children: /*#__PURE__*/_jsxDEV(StarsDisplay, {\n            count: stars\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 25\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"right\",\n          children: utils.range(1, 9).map(function (number) {\n            return /*#__PURE__*/_jsxDEV(ButtonDisplay, {\n              number: number,\n              status: numberStatus(number),\n              onClick: onNumberClick\n            }, number, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 29\n            }, _this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer\",\n        children: \"Time Remaining: 10\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, _this);\n}; // Color Theme\n\n\n_s(StarMatch, \"TQxvQun+juXQnzqBojRVQyk6vj8=\");\n\n_c3 = StarMatch;\nvar colors = {\n  available: 'lightgray',\n  used: 'lightgreen',\n  wrong: 'lightcoral',\n  candidate: 'deepskyblue'\n}; // Math science\n\nvar utils = {\n  // Sum an array\n  sum: function sum(arr) {\n    return arr.reduce(function (acc, curr) {\n      return acc + curr;\n    }, 0);\n  },\n  // create an array of numbers between min and max (edges included)\n  range: function range(min, max) {\n    return Array.from({\n      length: max - min + 1\n    }, function (_, i) {\n      return min + i;\n    });\n  },\n  // pick a random number between min and max (edges included)\n  random: function random(min, max) {\n    return min + Math.floor(Math.random() * (max - min + 1));\n  },\n  // Given an array of numbers and a max...\n  // Pick a random sum (< max) from the set of all available sums in arr\n  randomSumIn: function randomSumIn(arr, max) {\n    var sets = [[]];\n    var sums = [];\n\n    for (var i = 0; i < arr.length; i++) {\n      for (var j = 0, len = sets.length; j < len; j++) {\n        var candidateSet = sets[j].concat(arr[i]);\n        var candidateSum = utils.sum(candidateSet);\n\n        if (candidateSum <= max) {\n          sets.push(candidateSet);\n          sums.push(candidateSum);\n        }\n      }\n    }\n\n    return sums[utils.random(0, sums.length - 1)];\n  }\n};\nexport default StarMatch;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"StarsDisplay\");\n$RefreshReg$(_c2, \"ButtonDisplay\");\n$RefreshReg$(_c3, \"StarMatch\");","map":{"version":3,"sources":["C:/Users/jheinrich/Desktop/learningReact/pages/star-match.js"],"names":["NavBar","React","useState","useEffect","StarsDisplay","props","utils","range","count","map","starId","ButtonDisplay","backgroundColor","colors","status","onClick","number","StarMatch","random","stars","setStars","availableNums","setAvailableNums","candidateNums","setCandidateNums","candidatesAreWrong","sum","numberStatus","includes","onNumberClick","currentStatus","newCandidateNums","concat","available","used","wrong","candidate","arr","reduce","acc","curr","min","max","Array","from","length","_","i","Math","floor","randomSumIn","sets","sums","j","len","candidateSet","candidateSum","push"],"mappings":"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","sourcesContent":["import NavBar from '../src/components/Navbar/Navbar';\r\nimport React, {useState, useEffect} from 'react';\r\n\r\nconst StarsDisplay = props => {\r\n    return (\r\n        <>\r\n            {utils.range(1, props.count).map(starId => \r\n                <div key={starId} className=\"star\"></div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nconst ButtonDisplay = (props) => {\r\n    return (\r\n        <button \r\n        style={{backgroundColor: colors[props.status]}} \r\n        className=\"number\" \r\n        onClick={props.onClick(props.number, props.status)}\r\n        >\r\n            {props.number}\r\n        </button>\r\n    );\r\n};\r\n\r\nconst StarMatch = () => {\r\n    const [stars, setStars] = useState(utils.random(1, 9));\r\n    const [availableNums, setAvailableNums] = useState(utils.range(1, 9));\r\n    const [candidateNums, setCandidateNums] = useState([]);\r\n\r\n    const candidatesAreWrong = utils.sum(candidateNums) > stars;\r\n\r\n    const numberStatus = (number) => {\r\n    \r\n        if (!availableNums.includes(number)) {\r\n            return 'used';\r\n        }\r\n        if (candidateNums.includes(number)) {\r\n            return candidatesAreWrong ? 'wrong' : 'candidate';\r\n        }\r\n        return 'available';\r\n    }\r\n    \r\n    const onNumberClick = (number, currentStatus) => {\r\n        //currentStatus => newStatus\r\n        if (currentStatus == 'used') {\r\n            return;\r\n        }\r\n        const newCandidateNums = candidateNums.concat(number);\r\n\r\n        if (utils.sum(newCandidateNums) !== stars) {\r\n            setCandidateNums(newCandidateNums);\r\n        } //else {\r\n        //     const newAvailableNums = availableNums.filter(\r\n        //         n => !newCandidateNums.includes(n)\r\n        //     )\r\n        //     //redraw stars from what's available\r\n        //     setStars(utils.randomSumIn(newAvailableNums, 9))\r\n        //     setAvailableNums(newAvailableNums);\r\n        //     setCandidateNums([]);\r\n        // }\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex flex-col min-h-screen\">\r\n            <NavBar></NavBar>\r\n            <div className=\"game\">\r\n                <div className=\"help\">\r\n                Pick 1 or more numbers that sum to the number of stars\r\n                </div>\r\n                <div className=\"body\">\r\n                    <div className=\"left\">\r\n                        <StarsDisplay count={stars}/>\r\n                    </div>\r\n                    <div className=\"right\">\r\n                        {utils.range(1, 9).map(number => \r\n                            <ButtonDisplay \r\n                                key={number} \r\n                                number={number} \r\n                                status={numberStatus(number)}\r\n                                onClick={onNumberClick}\r\n                            />\r\n                        )}\r\n                    </div>\r\n                </div>\r\n                <div className=\"timer\">Time Remaining: 10</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n// Color Theme\r\nconst colors = {\r\n    available: 'lightgray',\r\n    used: 'lightgreen',\r\n    wrong: 'lightcoral',\r\n    candidate: 'deepskyblue',\r\n  };\r\n  \r\n  // Math science\r\n  const utils = {\r\n    // Sum an array\r\n    sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\r\n  \r\n    // create an array of numbers between min and max (edges included)\r\n    range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\r\n  \r\n    // pick a random number between min and max (edges included)\r\n    random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\r\n  \r\n    // Given an array of numbers and a max...\r\n    // Pick a random sum (< max) from the set of all available sums in arr\r\n    randomSumIn: (arr, max) => {\r\n      const sets = [[]];\r\n      const sums = [];\r\n      for (let i = 0; i < arr.length; i++) {\r\n        for (let j = 0, len = sets.length; j < len; j++) {\r\n          const candidateSet = sets[j].concat(arr[i]);\r\n          const candidateSum = utils.sum(candidateSet);\r\n          if (candidateSum <= max) {\r\n            sets.push(candidateSet);\r\n            sums.push(candidateSum);\r\n          }\r\n        }\r\n      }\r\n      return sums[utils.random(0, sums.length - 1)];\r\n    },\r\n  };\r\n\r\nexport default StarMatch;"]},"metadata":{},"sourceType":"module"}